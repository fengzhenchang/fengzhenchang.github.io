<div class="u-col">
    <div class="u-block">
        <h3>事件<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 事件处理</h4>
            <ul>
                <li><a href="">on</a>(type,[sel],[data],fn)<span><b>事件绑定</b>：<br/>
                  on('type',[data],fn) 绑定一个事件处理函数<br/>
                  on('type1 type2',[data],fn) 为多个事件绑定一个处理函数<br/>                  
                  on({type1:fn1,type2:fn2}) 为多个事件绑定不同的处理函数<br/>
                  on('type',[data],false) 取消默认行为和冒泡,注意在表单中取消的目标是form而非submit行为!<br/>
                  on('type.namespace',[...,fn]) 绑定指定命名空间事件<br/>
                  on('itype',...,fn).trigger() 绑定一个自定义事件加载时默认触发一次<br/>
                  <b>事件委托</b>：<br/>
                  $(parent).on('type','selector',[data],fn)<br/>
                  *<strong>事件委托时的selector为parent的子元素选择器</strong><br/>
                  *依旧绑定在指定父元素上,触发目标写在第2个参数,data数据在第3个参数 <br />
                  <b>*selector必须为选择器字符串,不可传递冗余复杂的CSS表达式变量!内部this是指选择器触发元素!</b></span></li>
                <li><a href="">off</a>(type,[sel],[fn])<span><b>事件移除</b>：<br/>
                  off() 无参数删除所有事件绑定<br/>
                  off('type') 删除某个事件<br/>
                  off('type',fn) 删除指定事件和处理函数<br/>
                  <b>取消事件委托</b>：<br/>
                  off() 无参数,删除所有委托事件<br>
                  off('type') 删除所有type事件<br>
                  off('type','selector') *注意委托元素写在第2个参数，删除指定目标的一个或多个事件委托,事件类型由空格分隔<br>
                  off('type','selector',fn) 删除指定的事件触发的执行函数<br>
                  off('type.namespace',[...,fn]) 删除指定命名空间事件</span></li>
                <li><a href="">one</a>(type,[sel],[data],fn)<span>类似on,但仅触发一次的事件!</span></li>
            </ul>
            <h4>[<span>+</span>] 旧事件处理</h4>
            <ul style="display:none">
                <li><a href="">bind</a>({type,[data],fn})<span>bind('type',fn) 绑定一个事件处理函数<br/>
                     bind('type1 type2',fn) 为多个事件绑定一个处理函数<br/>                  
                     bind({type1:fn1,type2:fn2}) 为多个事件绑定不同的处理函数<br/>
                     bind(type,false) 取消默认行为和冒泡,注意取消的目标是form而非submit行为!</span></li>
                <li><a href="">unbind</a>([type,fn])<span>unbind() 删除所有事件绑定<br/>
                     unbind('type') 删除某个事件<br/>
                     unbind('type',fn) 删除指定事件和处理函数</span></li>
                <li><a href="">delegate</a>(ele,type,[d],fn)<span>在统一级父元素上绑定事件，分配给触发事件的目标。<br>
                     1.在 DOM 中很多元素绑定相同事件时；<br>
                     2.在 DOM 中尚不存在即将生成的元素绑定事件时；<br>
                     我们推荐使用事件委托的绑定方式，否则推荐使用.bind()的普通绑定<br>
                     $(parent).delegate(target,type,fn)</span></li>
                <li><a href="">undelegate()</a><span>undelegate() 无参数,删除所有委托事件<br>
                     undelegate(ele,type) 删除指定的一个或多个事件,事件类型由空格分隔<br>
                     undelegate(ele,type,fn) 删除指定的事件触发执行函数<br>
                     undelegate(type) 删除所有type事件<br>
                     undelegate(type.namespace) 删除指定命名空间事件</span></li>
            </ul>
            <h4>[<span>-</span>] 事件模拟</h4>
            <ul>
                <li><a href="">trigger</a>(type,[datas])<span>
                    模拟事件:让该事件在页面加载时便模拟执行一次,可连缀写法<br>
                  $(ele).type(fn[data]).trigger(type) <br>
                  简写方案:【限JQ封装的常用事件】想让某个事件执行模拟用户行为,直接再调用一个空的同名事件即可<br>
                  $(ele).type(fn).type()
                  单fn数据:可以传入数据，此处数据为事件函数传入的数据，而非e.data<br>
                  $(ele).type(fn[e,data]).trigger(type,data)<br>
                  多fn数据:可传入多个data数据,用[]将其包围<br>
                  $(ele).type(fn[e,data1,data2]).trigger(type,[data1,data2])</span></li>
                <li><a href="">triggerHandler</a>(type, [data])<span>与trigger的区别：<br>
                  1.不会触发事件的默认行为，如表单提交<br>
                  2.只会影响第一个匹配到的元素，而.trigger()会影响所有。<br>
                  3.返回当前事件执行的返回值，如果没有返回值，则返回undefined；而.trigger()则返回当前包含事件触发元素的 jQuery 对象(方便链式连缀调用)<br>
                  4.对于自定义事件，.triggerHandler()不会冒泡，trigger()则默认会冒泡</span></li>
            </ul>
            <h4>[<span>-</span>] 浏览器/文档事件</h4>
            <ul>
                <li><a href="">ready(fn)</a><span>
                    文档就绪,DOM结构完成时即执行,如果某些行为必须等待图片或css加载完成再执行则应绑定到load事件</span></li>
                <li><a href="">load</a>([[data],fn])<span>
                    必须完全加载完成,而ready只判定DOM结构<br>当所有子元素已经被完全加载完成时，load事件被发送到这个元素。<br>此事件适用于任何可使用 URL关联的任何元素：images, scripts, frames, iframes,  window 对象。</span></li>
                <li><a href="">scroll</a>([[data],fn])<span>
                    scroll 事件适用于所有可滚动的元素和 window 对象（浏览器窗口）
                    <br /><b>调式IE的过程中，需要去掉console.log命令，否则会因为前面不识别而不运行，改为alert命令</b>
                    <br />1.动态监听浏览器拖曳滚动条scroll事件应使用document绑定事件（而非html或body）
                    <br />$(document).scroll(function(){
                    <br /> nowscroll = $(document).scrollTop();
                    <br />})
                    <br />2.绑定点击触发页面滚动事件，要设置'html'和'body'元素滚动，设置document无效
                    <br />设置body在IE中无效,设置html在webkit某些时候无效,尽量不要用window,未知报错
                    <br />$(selector).click(function(){
                    <br /> $('body,html').animate({'scrollTop':val},speed)
                    <br />})
                    <br /><b>当为a元素带#时，默认会跳到顶部，需要阻止默认行为！</b></span></li>
                <li><a href="">resize</a>([[data],fn])<span>浏览器window的尺寸发生改变时</span></li>
            </ul>
            <h4>[<span>+</span>] 鼠标事件</h4>
            <ul style="display:none">
                <li><a href="">click</a>([[data],fn])<span>click(fn) 绑定一个函数到点击<br>                  click(data,fn) 绑定一个函数并传入eventData<br>                  click() 触发此事件,可能由其他事件触发此事件发生<br>                  *click要素：鼠标指针在元素里面时点击，鼠标指针在元素里面时释放，如果这些不被满足，mousedown 或 mouseup事件可能更加合适。    </span></li>
                <li><a href="">dblclick</a>([[data],fn])<span>双击</span></li>
                <li><a href="">mousedown</a>([[data],fn])<span>鼠标按下</span></li>
                <li><a href="">mouseup</a>([[data],fn])<span>鼠标弹起</span></li>
                <li><a href="">mouseover</a>([[data],fn])<span>鼠标经过</span></li>
                <li><a href="">mouseout</a>([[data],fn])<span>鼠标移出</span></li>
                <li><a href="">mousemove</a>([[data],fn])<span>鼠标移动</span></li>
                <li><a href="">mouseenter</a>([[data],fn])<span>鼠标穿入,穿过子元素而非本体内容时不触发</span></li>
                <li><a href="">mouseleave</a>([[data],fn])<span>鼠标穿出,穿过子元素而非本体内容时不触发</span></li>
                <li><a href="">hover</a>(enter,leave)<span>组合mouseenter与mouseleave</span></li>
                <li>
                    <a href="">contextmenu</a>([[data],fn])
                    <span>
                        添加事件处理程序到 contextmenu 事件
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 键盘事件</h4>
            <ul style="display:none">
                <li><a href="">keydown</a>([[data],fn])<span>键盘按下,返回键码e.keyCode</span></li>
                <li><a href="">keypress</a>([[data],fn])<span>键盘按下,返回字符编码e.charCode </span></li>
                <li><a href="">keyup(</a>([[data],fn])<span>键盘按下并弹起</span></li>
            </ul>
            <h4>[<span>+</span>] 表单事件</h4>
            <ul style="display:none">
                <li><a href="">focus</a>([[data],fn])<span>获取焦点,必须为当前元素</span></li>
                <li><a href="">blur</a>([[data],fn])<span>丢失焦点,必须为当前元素 </span></li>
                <li><a href="">focusin</a>([[data],fn])<span>获取焦点,可以为当前元素的子元素</span></li>
                <li><a href="">focusout</a>([[data],fn])<span>获取焦点,可以为当前元素的子元素</span></li>
                <li><a href="">change</a>([[data],fn])<span>下拉选择,单选多选,文本框/域值发生变化时<br>                  仅限用于input、textarea、select元素。<br>                  对于下拉选择框，复选框和单选按钮，当用户用鼠标作出选择，该事件立即触发<br>                  但对于其他类型的input元素，该事件触发将推迟，直到元素失去焦点才会触点</span></li>
                <li><a href="">select</a>([[data],fn])<span>文本被选择事件!而非下拉列表选择</span></li>
                <li><a href="">submit</a>([[data],fn])<span>注意绑定的对象是form!而非submit </span></li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>事件对象<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 通用事件对象</h4>
            <ul>
                <li>e.<a href="">data</a><span>传入指定值绑定到事件函数里,可以为变量,如为函数会打印函数字符串,需要()执行函数返回函数返回的内容</span></li>
                <li>e.<a href="">result</a><span>返回同一个元素上一个事件绑定函数的返回值</span></li>
                <li>e.<a href="">timeStamp</a><span>返回事件触发时的时间戳</span></li>
                <li>e.<a href="">type</a><span>事件类型</span></li>
                <li>e.<a href="">target</a><span>触发事件的DOM元素</span></li>
                <li>e.<a href="">currentTarget</a><span>事件监听的元素,即被绑定事件的元素</span></li>
                <li>e.<a href="">relatedTarget</a><span>对于 mouseout 事件，它指向被进入的元素；<br/> 对于 mousein 事件，它指向被离开的元素。</span></li>
                <li>e.<a href="">delegateTarget</a><span>事件委托目标</span></li>
                <li>
                    e.<a href="">namespace</a>
                    <span>
                        返回当事件被触发时指定的命名空间
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 冒泡与默认行为</h4>
            <ul>
                <li>e.<a href="">stopPropagation()</a><span>阻止冒泡</span></li>
                <li>e.<a href="">preventDefault()</a><span>阻止默认行为 <br>
                *阻止表单提交应对按钮绑定事件click,或表单绑定submit</span></li>
                <li>e.<a href="">stopImmediatePropagation()</a><span>取消事件冒泡，并取消该事件的后续事件处理函数【并未取消默认行为】</span></li>
            </ul>
            <h4>[<span>-</span>] 鼠标键盘事件对象</h4>
            <ul>
                <li><a href="">e.which</a><span>
                    event.which 将 event.keyCode 和 event.charCode 标准化了。推荐用 event.which 来监视键盘输入。
                </span></li>
            </ul>
        </div>
    </div>
</div>