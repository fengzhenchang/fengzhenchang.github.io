<div class="u-col">
    <div class="u-block">
        <h3>WindowTimers<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 定时器</h4>
            <ul>
            	<li>
            		<a href="">setTimeout</a>(fn,delay,[arg])
            		<span>
            			在指定的毫秒数后调用函数或计算表达式 <br>
            			setTimeout还允许添加更多的参数，它们将被传入推迟执行的函数（回调函数），IE 9.0及以下版本，只允许setTimeout有两个参数，不支持更多的参数。 <hr>
            			<a href="http://javascript.ruanyifeng.com/advanced/timer.html#toc4">当delay=0时的应用，同样需等待队列完成</a> <hr>
                        在严格模式下，setTimeout( )的回调函数里面的this仍然默认指向window对象， 并不是undefined
            		</span>
            	</li>
            	<li>
            		<a href="">setInterval</a>(fn,delay)
            		<span>
            			按照指定的周期（以毫秒计）来调用函数或计算表达式
            		</span>
            	</li>
            	<li>
            		<a href="">clearTimeout</a>(timer)
            		<span>
            			取消由 setTimeout() 方法设置的 timeout
            		</span>
            	</li>
            	<li>
            		<a href="">clearInterval</a>(timer)
            		<span>
            			取消由 setInterval() 设置的 timeout
            		</span>
            	</li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>Window<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 渲染</h4>
			<ul>
				<li>
					window.<a href="">requestAnimationFrame</a><em>(fn)</em>
					<span>
						一般浏览器是每秒60帧，即显示频率是16.7ms，这也是为何setTimeout的定时器值推荐最小使用16.7ms的原因（16.7 = 1000 / 60, 即每秒60帧）。 <br>
						<a href="http://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%E5%8A%A8%E7%94%BB%E7%AE%97%E6%B3%95/">参考资料</a> | <a href="http://javascript.ruanyifeng.com/bom/engine.html#toc11">浏览器渲染原理</a>
<pre><code data-language="javascript">
    (function() {
        var lastTime = 0;
        var vendors = ['webkit', 'moz'];
        for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
            window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
            window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||    // name has changed in Webkit
                                          window[vendors[x] + 'CancelRequestAnimationFrame'];
        }

        if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = function(callback, element) {
                var currTime = new Date().getTime();
                var timeToCall = Math.max(0, 16.7 - (currTime - lastTime));
                var id = window.setTimeout(function() {
                    callback(currTime + timeToCall);
                }, timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };
        }
        if (!window.cancelAnimationFrame) {
            window.cancelAnimationFrame = function(id) {
                clearTimeout(id);
            };
        }
    }());
</code></pre>
					</span>
				</li>
			</ul>
        	<h4>[<span>-</span>] 窗口</h4>
        	<ul>
        		<li>
        			window.<a href="">print()</a>
        			<span>
        				打印当前窗口内容
        			</span>
        		</li>
        		<li>
        			window.<a href="">open</a>([url],[pos],[specs])
        			<span>
        				打开一个新浏览器窗口或查找一个已命名的窗口。 <br>
        				url:打开指定的页面的URL，如果没有指定URL，打开与新的空白窗口。 <br>
        				name:指定target属性或窗口的名称，_blank/_parent/_self/_top/$name <br>
        				specs:指定尺寸是显示模式等。 <br>
                        返回值：新创建的窗口 <br>
        				<a href="http://www.runoob.com/jsref/met-win-open.html">参考资料</a>
        			</span>
        		</li>
        		<li>
        			window.<a href="">close()</a>
        			<span>
        				关于浏览器窗口
        			</span>
        		</li>
        		<li>
            		window.<a href="">opener</a>
            		<span>
            			返回对创建此窗口的窗口的引用
            		</span>
            	</li>
                <li>
                    window.<a href="">focus()</a>
                    <span>
                        激活指定当前窗口，使其获得焦点
                    </span>
                </li>
        	</ul>
            <h4>[<span>-</span>] 框架</h4>
            <ul>
                <li>
                    window.<a href="">name</a>
                    <span>
                        用于设置当前浏览器窗口的名字,当浏览器窗口关闭后，所保存的值就会消失
                    </span>
                </li>
                <li>
                    window.<a href="">frames</a>
                    <span>
                        返回一个类似数组的对象，成员为页面内所有框架窗口，包括frame元素和iframe元素。window.frames[0]表示页面中第一个框架窗口。
                    </span>
                </li>
            	<li>
            		window.<a href="">length</a>
            		<span>
            			返回在当前窗口中frames的数量（包括iframes）
            		</span>
            	</li>
            	<li>
            		window.<a href="">parent</a>
            		<span>
            			返回父窗口对象。
            		</span>
            	</li>
            	<li>
            		window.<a href="">self</a>
            		<span>
            			返回对当前窗口的引用。
            		</span>
            	</li>
            	<li>
            		window.<a href="">top</a>
            		<span>
            			返回当前窗口的最顶层浏览器窗口<br>
            			可通过window.top!=window.self判断在iframe中
            		</span>
            	</li>
            </ul>
            <h4>[<span>-</span>] 弹窗</h4>
            <ul>
            	<li>
            		<a href="">alert</a>('msg')
            		<span>
            			显示带有一段消息和一个确认按钮的警告框
            		</span>
            	</li>
            	<li>
            		<a href="">confirm</a>('msg')
            		<span>
            			显示一个带有指定消息和确认及取消按钮的对话框 <br>
            			点击确定返回true，否则返回false。
            		</span>
            	</li>
            	<li>
            		<a href="">prompt</a>('msg',[txt])
            		<span>
            			显示可提示用户进行输入的对话框 <br>
            			txt为默认填写的内容，可选。 <br>
            			返回用户输入的字符串。
            		</span>
            	</li>
            </ul>
            <h4>[<span>-</span>] Navigator</h4>
            <ul>
                <li>
                    navigator.<a href="">appVersion</a>
                    <span>
                        返回浏览器的平台和版本信息
                    </span>
                </li>
                <li>
                    navigator.<a href="">userAgent</a>
                    <span>
                        返回由客户机发送服务器的user-agent 头部的值
                    </span>
                </li>
                <li>
                    navigator.<a href="">platform</a>
                    <span>
                        返回运行浏览器的操作系统平台 <br>
                        Win32
                    </span>
                </li>
                <li>
                    navigator.<a href="">plugins</a>
                    <span>
                        返回一个类似数组的对象，成员是浏览器安装的插件，比如Flash、ActiveX等。
                    </span>
                </li>
                <li>
                    navigator.<a href="">geolocation</a>
                    <span>
                        返回一个Geolocation对象，包含用户地理位置的信息。
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] Location</h4>
            <ul>
                <li>
                    location.<a href="">href</a>
                    <span>
                        返回完整的url
                    </span>
                </li>
                <li>
                    location.<a href="">hash</a>
                    <span>
                        返回一个url的锚部分：#hash
                    </span>
                </li>
                <li>
                    location.<a href="">search</a>
                    <span>
                        返回一个url的查询部分：?x=search
                    </span>
                </li>
                <li>
                    location.<a href="">pathname</a>
                    <span>
                        返回url路径（除去域名协议部分）
                    </span>
                </li>
                <li>
                    location.<a href="">hostname</a>
                    <span>
                        返回url的主机名 <br>
                        www.xxx.com
                    </span>
                </li>
                <li>
                    location.<a href="">port</a>
                    <span>
                        返回url服务器使用的端口
                    </span>
                </li>
                <li>
                    location.<a href="">protocol</a>
                    <span>
                        返回一个url协议 <br> http:
                    </span>
                </li>
                <li>
                    location.<a href="">reload</a>([true])
                    <span>
                        重新载入当前文档。当设置true时，那么无论文档的最后修改日期是什么，它都会绕过缓存，从服务器上重新下载该文档
                    </span>
                </li>
                <li>
                    location.<a href="">replace</a>(url)
                    <span>
                        用新的文档替换当前文档
                    </span>
                </li>
                <li>
                    location.<a href="">assign</a>(url)
                    <span>
                        载入一个新的文档
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>]控制台</h4>
			<ul style="display: none;">
				<li>
					console.<a href="">log</a>()
					<span>
						console.log() <br>
						console.debug() <br>
						console.info() - 蓝色图标 <br>
						console.warn() - 黄色三角 <br>
						console.error() - 红色叉叉 <br>
						console.table() - 表格显示 <br>
						console.clear() - 清空
					</span>
				</li>
				<li>
					console.<a href="">count</a>(var)
					<span>
						用于计数，输出它被调用了多少次
					</span>
				</li>
				<li>
					console.<a href="">dir</a>(dom)
					<span>
						该方法对于输出 DOM 对象非常有用，因为会显示 DOM 对象的所有属性。 <br>
						console.dirxml(dom) : 以目录树的形式，显示 DOM 节点
					</span>
				</li>
				<li>
					console.<a href="">assert</a>(false,'msg')
					<span>
						<a href="http://javascript.ruanyifeng.com/stdlib/console.html">参考资料</a>
					</span>
				</li>
				<li>
					console.<a href="">time/timeEnd</a>(name)
					<span>
						time方法表示计时开始，timeEnd方法表示计时结束。它们的参数是计时器的名称。 <br>
						放在一个需要计时的代码起始与末尾。
					</span>
				</li>
				<li>
					console.<a href="">profile/profileEnd</a>(name)
					<span>
						新建一个性能测试器。类同time，在profile面板中，可以看到这个性能调试器的运行结果
					</span>
				</li>
				<li>
					console.<a href="">group/groupend</a>(name)
					<span>
						分组展示，可用鼠标折叠展开。 <br>
						console.groupCollapsed() 默认第一次是折叠的。
					</span>
				</li>
				<li>
					console.<a href="">trace()</a>
					<span>
						显示当前执行的代码在堆栈中的调用路径
					</span>
				</li>
				<li>
					<a href="">debugger</a>
					<span>
						debugger语句主要用于除错，作用是设置断点
					</span>
				</li>
			</ul>
            <h4>[<span>-</span>] postMessage (窗口间)</h4>
            <ul>
                <li>
                    window.<a href="">postMessage</a>
                    <span>
                        跨文档通信 API（Cross-document messaging）。
                        
                    </span>
                </li>
                <li>
                    otherWindow.<a href="">postMessage</a><em>(msg,target)</em>
                    <span>
                        给其他窗口发送消息。<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage">参考资料</a>
                    </span>
                </li>
                <li>
                    <em>[event]</em><a href="">message</a>
                    <span>
                        window.postMessage() 方法被调用时，会在所有页面脚本执行完毕之后（e.g., 在该方法之后设置的事件、之前设置的timeout 事件,etc.）向目标窗口派发一个  MessageEvent 消息。 该MessageEvent消息有四个属性需要注意： message 属性表示该message 的类型； data 属性为 window.postMessage 的第一个参数；origin 属性表示调用window.postMessage() 方法时调用页面的当前状态； source 属性记录调用 window.postMessage() 方法的窗口信息。
                    </span>
                </li>
                <li>
                    e.<a href="">source</a>
                    <span>
                        发消息的窗口
                    </span>
                </li>
                <li>
                    e.<a href="">origin</a>
                    <span>
                        消息发向的网址
                    </span>
                </li>
                <li>
                    e.<a href="">data</a>
                    <span>
                        消息内容
                    </span>
                </li>
            </ul>
        </div>
    </div>
</div>