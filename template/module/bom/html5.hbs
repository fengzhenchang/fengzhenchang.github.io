<div class="u-col">
    <div class="u-block">
        <div class="u-block">
            <h3>IntersectionObserver<span>-</span></h3>
            <div class="u-list">
                <h4>[<span>-</span>] 构造函数</h4>
                <ul>
                    <li>
                        <a href="">new IntersectionObserver</a><em>(callback(entries),[opt])</em>
                        <span>
                            <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver">IntersectionObserver</a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserverEntry">IntersectionObserverEntry</a> <br>
                            <a href="https://www.cnblogs.com/ziyunfei/p/5558712.html">参考资料</a> 
                        </span>
                    </li>
                    <li>
                        opt.<a href="">root</a>
                        <span>
                            值：null | selectorID <br>
                            一个可以滚动的元素，我们叫它根元素，它有很多后代元素，想要做的就是判断它的某个后代元素是否滚动进了自己的可视区域范围。这个 root 参数就是用来指定根元素的，默认值是 null，代表viewport。
                        </span>
                    </li>
                    <li>
                        opt.<a href="">threshold</a>
                        <span>
                            值：[0~1] <br>
                            当目标元素和根元素相交时，用相交的面积除以目标元素的面积会得到一个 0 到 1（0% 到 100%）的数值。当目标元素和根元素相交的面积占目标元素面积的百分比到达或跨过某些指定的临界值时就会触发回调函数。不但包含进入，也包括离开。
                        </span>
                    </li>
                    <li>
                        opt.<a href="">rootMargin</a>
                        <span>
                            值："0px 0px 0px 0px" <br>
                            根边界盒的矩形偏移量，也可理解为提前量。单位可用px与百分比。 <br>
                            设置为0时，也必须带上px单位。可设为负值。
                        </span>
                    </li>
                    <li>
                        <a href="https://github.com/w3c/IntersectionObserver/tree/master/polyfill">polyfill</a>
                    </li>
                </ul>
                <h4>[<span>+</span>] 实例属性(仅读)</h4>
                <ul style="display:none;">
                    <li>
                        observer.<a href="">root</a>
                        <span>
                            值：null | 被设置的dom元素
                        </span>
                    </li>
                    <li>
                        observer.<a href="">thresholds</a>
                        <span>
                            值：[0,0.5,1]
                        </span>
                    </li>
                    <li>
                        observer.<a href="">rootMargin</a>
                        <span>
                            值："100px 0px"
                        </span>
                    </li>
                </ul>
                <h4>[<span>-</span>] 实例方法</h4>
                <ul>
                    <li>
                        observer.<a href="">observe</a>(ele)
                        <span>
                            观察某个目标元素，一个观察者实例可以观察任意多个目标元素。
                        </span>
                    </li>
                    <li>
                        observer.<a href="">unobserve</a>(ele)
                        <span>
                            停止监听特定目标元素。
                        </span>
                    </li>
                    <li>
                        observer.<a href="">disconnect()</a>
                        <span>
                            终止对所有目标的观察。
                        </span>
                    </li>
                    <li>
                        observer.<a href="">takeRecords()</a>
                        <span>
                            返回包含若干个 IntersectionObserverEntry 对象的数组
                        </span>
                    </li>
                </ul>
                <h4>[<span>-</span>] IntersectionObserverEntry</h4>
                <ul>
                    <li>
                        entry.<a href="">target</a>
                        <span>
                            相交发生时的目标元素，因为一个根元素可以观察多个目标元素，所以这个 target 不一定是哪个元素。
                        </span>
                    </li>
                    <li>
                        entry.<a href="">isIntersecting</a>
                        <span>
                            true/false
                        </span>
                    </li>
                    <li>
                        entry.<a href="">intersectionRatio</a>
                        <span>
                            0 到 1 的数值，表示相交区域占目标元素区域的百分比，也就是 intersectionRect 的面积除以 boundingClientRect 的面积得到的值
                        </span>
                    </li>
                    <li>
                        entry.<a href="">time</a>
                        <span>
                            相交发生时距离页面打开时的毫秒数（有小数） <br>
                            也就是相交发生时 performance.now() 的返回值，比如 60000.560000000005，表示是在页面打开后大概 1 分钟发生的相交。在回调函数里用 performance.now() 减去这个值，就能算出回调函数被 requestIdleCallback 延迟了多少毫秒
                        </span>
                    </li>
                    <li>
                        entry.<a href="">rootBounds</a>
                        <span>
                            一个对象值，表示发生相交时根元素可见区域的矩形信息
                        </span>
                    </li>
                    <li>
                        entry.<a href="">boundingClientRect</a>
                        <span>
                            发生相交时目标元素的矩形信息，等价于 target.getBoundingClientRect()。
                        </span>
                    </li>
                    <li>
                        entry.<a href="">intersectionRect</a>
                        <span>
                            根元素和目标元素相交区域的矩形信息。
                        </span>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="u-block">
        <h3>Performance API<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] performance.timing对象</h4>
            <ul>
                <li>
                    <a href="">performance.timing</a>
                    <span>
                        <a href="http://javascript.ruanyifeng.com/bom/performance.html">参考资料</a>
                        <pre><code data-language="javascript">
                            var t = performance.timing;
                            var pageloadtime = t.loadEventStart - t.navigationStart; //页面加载的耗时
                            var dns = t.domainLookupEnd - t.domainLookupStart; //域名解析的耗时
                            var tcp = t.connectEnd - t.connectStart; //TCP连接的耗时
                            var ttfb = t.responseStart - t.navigationStart; //读取页面第一个字节之前的耗时
                        </code></pre>
                    </span>
                </li>
                <li>
                    t.<a href="">navigationStart</a>
                    <span>
                        前浏览器窗口的前一个网页关闭，发生unload事件时的Unix毫秒时间戳。如果没有前一个网页，则等于fetchStart属性。
                    </span>
                </li>
                <li>
                    t.<a href="">unloadEventStart</a>
                    <span>
                        如果前一个网页与当前网页属于同一个域名，则返回前一个网页的unload事件发生时的Unix毫秒时间戳。如果没有前一个网页，或者之前的网页跳转不是在同一个域名内，则返回值为0。
                    </span>
                </li>
                <li>
                    t.<a href="">unloadEventEnd</a>
                    <span>
                        如果前一个网页与当前网页属于同一个域名，则返回前一个网页unload事件的回调函数结束时的Unix毫秒时间戳。如果没有前一个网页，或者之前的网页跳转不是在同一个域名内，则返回值为0。
                    </span>
                </li>
                <li>
                    t.<a href="">redirectStart</a>
                    <span>
                        返回第一个HTTP跳转开始时的Unix毫秒时间戳。如果没有跳转，或者不是同一个域名内部的跳转，则返回值为0。
                    </span>
                </li>
                <li>
                    t.<a href="">redirectEnd</a>
                    <span>
                        回最后一个HTTP跳转结束时（即跳转回应的最后一个字节接受完成时）的Unix毫秒时间戳。如果没有跳转，或者不是同一个域名内部的跳转，则返回值为0。
                    </span>
                </li>
                <li>
                    t.<a href="">fetchStart</a>
                    <span>
                        返回浏览器准备使用HTTP请求读取文档时的Unix毫秒时间戳。该事件在网页查询本地缓存之前发生。
                    </span>
                </li>
                <li>
                    t.<a href="">domainLookupStart</a>
                    <span>
                        回域名查询开始时的Unix毫秒时间戳。如果使用持久连接，或者信息是从本地缓存获取的，则返回值等同于fetchStart属性的值。
                    </span>
                </li>
                <li>
                    t.<a href="">domainLookupEnd</a>
                    <span>
                        返回域名查询结束时的Unix毫秒时间戳。如果使用持久连接，或者信息是从本地缓存获取的，则返回值等同于fetchStart属性的值。
                    </span>
                </li>
                <li>
                    t.<a href="">connectStart</a>
                    <span>
                        返回HTTP请求开始向服务器发送时的Unix毫秒时间戳。如果使用持久连接（persistent connection），则返回值等同于fetchStart属性的值。
                    </span>
                </li>
                <li>
                    t.<a href="">connectEnd</a>
                    <span>
                        回浏览器与服务器之间的连接建立时的Unix毫秒时间戳。如果建立的是持久连接，则返回值等同于fetchStart属性的值。连接建立指的是所有握手和认证过程全部结束。
                    </span>
                </li>
                <li>
                    t.<a href="">secureConnectionStart</a>
                    <span>
                        返回浏览器与服务器开始安全链接的握手时的Unix毫秒时间戳。如果当前网页不要求安全连接，则返回0。
                    </span>
                </li>
                <li>
                    t.<a href="">requestStart</a>
                    <span>
                        返回浏览器向服务器发出HTTP请求时（或开始读取本地缓存时）的Unix毫秒时间戳。
                    </span>
                </li>
                <li>
                    t.<a href="">responseStart</a>
                    <span>
                        返回浏览器从服务器收到（或从本地缓存读取）第一个字节时的Unix毫秒时间戳。
                    </span>
                </li>
                <li>
                    t.<a href="">responseEnd</a>
                    <span>
                        回浏览器从服务器收到（或从本地缓存读取）最后一个字节时（如果在此之前HTTP连接已经关闭，则返回关闭时）的Unix毫秒时间戳
                    </span>
                </li>
                <li>
                    t.<a href="">domLoading</a>
                    <span>
                        返回当前网页DOM结构开始解析时（即Document.readyState属性变为“loading”、相应的readystatechange事件触发时）的Unix毫秒时间戳。
                    </span>
                </li>
                <li>
                    t.<a href="">domInteractive</a>
                    <span>
                        返回当前网页DOM结构结束解析、开始加载内嵌资源时（即Document.readyState属性变为“interactive”、相应的readystatechange事件触发时）的Unix毫秒时间戳。
                    </span>
                </li>
                <li>
                    t.<a href="">domContentLoadedEventStart</a>
                    <span>
                        返回当前网页DOMContentLoaded事件发生时（即DOM结构解析完毕、所有脚本开始运行时）的Unix毫秒时间戳。
                    </span>
                </li>
                <li>
                    t.<a href="">domContentLoadedEventEnd</a>
                    <span>
                        返回当前网页所有需要执行的脚本执行完成时的Unix毫秒时间戳。
                    </span>
                </li>
                <li>
                    t.<a href="">domComplete</a>
                    <span>
                        返回当前网页DOM结构生成时（即Document.readyState属性变为“complete”，以及相应的readystatechange事件发生时）的Unix毫秒时间戳。
                    </span>
                </li>
                <li>
                    t.<a href="">loadEventStart</a>
                    <span>
                        返回当前网页load事件的回调函数开始时的Unix毫秒时间戳。如果该事件还没有发生，返回0。
                    </span>
                </li>
                <li>
                    t.<a href="">loadEventEnd</a>
                    <span>
                        返回当前网页load事件的回调函数运行结束时的Unix毫秒时间戳。如果该事件还没有发生，返回0。
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 相关方法</h4>
            <ul>
                <li>
                    performance.<a href="">now()</a>
                    <span>
                        返回当前网页自从performance.timing.navigationStart到当前时间之间的微秒数（毫秒的千分之一）。也就是说，它的精度可以达到100万分之一秒。 <br>
                        可以通过两次调用performance.now方法，可以得到间隔的准确时间，用来衡量某种操作的耗时
                    </span>
                </li>
                <li>
                    performance.<a href="">mark</a>(name)
                    <span>
                        为相应的视点做标记
                    </span>
                </li>
                <li>
                    performance.<a href="">clearMarks</a>([name])
                    <span>
                        用于清除标记，如果不加参数，就表示清除所有标记
                    </span>
                </li>
                <li>
                    performance.<a href="">getEntries()</a>[n]
                    <span>
                        浏览器获取网页时，会对网页中每一个对象（脚本文件、样式表、图片文件等等）发出一个HTTP请求。performance.getEntries方法以数组形式，返回这些请求的时间统计信息，有多少个请求，返回数组就会有多少个成员。
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 用户行为</h4>
            <ul>
                <li>
                    performance.<a href="">navigation</a>
                    <span>
                        除了时间信息，performance还可以提供一些用户行为信息，主要都存放在performance.navigation对象上面。
                    </span>
                </li>
                <li>
                    pn.<a href="">type</a>
                    <span>
                        该属性返回一个整数值，表示网页的加载来源，可能有以下4种情况：
                        0：网页通过点击链接、地址栏输入、表单提交、脚本操作等方式加载，相当于常数performance.navigation.TYPE_NAVIGATENEXT。 <br>
                        1：网页通过“重新加载”按钮或者location.reload()方法加载，相当于常数performance.navigation.TYPE_RELOAD。<br>
                        2：网页通过“前进”或“后退”按钮加载，相当于常数performance.navigation.TYPE_BACK_FORWARD。<br>
                        255：任何其他来源的加载，相当于常数performance.navigation.TYPE_UNDEFINED。
                    </span>
                </li>
                <li>
                    pn.<a href="">redirectCount</a>
                    <span>
                        该属性表示当前网页经过了多少次重定向跳转。
                    </span>
                </li>
            </ul>
        </div>
        <h3>性能与缓存<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] Application Cache</h4>
            <ul>
                <li>
                    <a href="http://www.runoob.com/html/html5-app-cache.html">Manifest</a>
                </li>
            </ul>
        </div>
    </div>
</div>