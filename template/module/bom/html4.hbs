<div class="u-col">
    <div class="u-block">
        <h3>Ajax<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>-</span>]创建</h4>
			<ul>
				<li>
					<a href="">new XMLHttpRequest()</a>
					<span>
						IE5-6不支持，用ActiveX对象替代，new ActiveXObject("Microsoft.XMLHTTP")
					</span>
				</li>
				<li>
					xhr.<a href="">open</a><em>(method,url,async)</em>
					<span>
						规定请求的类型、URL 以及是否异步处理请求。 <br>
						method：(请求的类型)GET 或 POST <br>
						以下情况使用POST请求：<br>
						1.无法使用缓存文件（更新服务器上的文件或数据库）<br>
						2.向服务器发送大量数据（POST 没有数据量限制）<br>
						3.发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠 <hr>
						url：文件在服务器上的位置<hr>
						async：true（异步）或 false（同步） <br>
						跨域请求时使用jsonp，此时只能为异步请求，无法同步 <br>
						注意：当您使用 async=false 时，请不要编写 onreadystatechange 函数 - 把代码放到 send() 语句后面即可
					</span>
				</li>
				<li>
					xhr.<a href="">setRequestHeader</a><em>(header,val)</em>
					<span>
						向请求添加HTTP头 <br>
						xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded") <br>
						该方法必须在open()之后、send()之前调用。
					</span>
				</li>
				<li>
					xhr.<a href="">send</a>(str)
					<span>
						将请求发送到服务器。 <br>
						string：仅用于post请求 
					</span>
				</li>
			</ul>
			<h4>[<span>+</span>]属性</h4>
			<ul style="display:none;">
				<li>
					xhr.<a href="">timeout</a>
					<span>
						等于一个整数，表示多少毫秒后，如果请求仍然没有得到结果，就会自动终止
					</span>
				</li>
				<li>
					xhr.<a href="">withCredentials</a>
					<span>
						withCredentials属性是一个布尔值，表示跨域请求时，用户信息（比如Cookie和认证的HTTP头信息）是否会包含在请求之中，默认为false。 <br>
						如果你需要通过跨域AJAX发送Cookie，需要打开withCredentials。 <br>
						为了让这个属性生效，服务器必须显式返回Access-Control-Allow-Credentials这个头信息
					</span>
				</li>
			</ul>
			<h4>[<span>+</span>]状态</h4>
			<ul style="display:none;">
				<li>
					xhr.<a href="">readyState</a>
					<span>
						0: 请求未初始化 <br>
						1: 服务器连接已建立 <br>
						2: 请求已接收 <br>
						3: 请求处理中 <br>
						4: 请求已完成，且响应已就绪 <br>
						当 readyState 等于 4 且状态为 200 时，表示响应已就绪
					</span>
				</li>
				<li>
					xhr.<a href="">status</a>
					<span>
						200, OK，访问正常 <br>
						301, Moved Permanently，永久移动<br>
						302, Move temporarily，暂时移动<br>
						304, Not Modified，未修改<br>
						307, Temporary Redirect，暂时重定向<br>
						401, Unauthorized，未授权<br>
						403, Forbidden，禁止访问<br>
						404, Not Found，未发现指定网址<br>
						500, Internal Server Error，服务器发生错误
					</span>
				</li>
			</ul>
			<h4>[<span>+</span>]事件</h4>
			<ul style="display:none;">
				<li>
					xhr.<a href="">onreadystatechange</a>
					<span>
						存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。 <br>
						当 readyState 等于 4 且状态为 200 时，表示响应已就绪 <br>
						XMLHttpRequest第一版，只能对onreadystatechange这一个事件指定回调函数。
					</span>
				</li>
				<li>
					xhr.<a href="">onloadstart</a>
					<span>
						请求发出
					</span>
				</li>
				<li>
					xhr.<a href="">onprogress</a>
					<span>
						正在发送和加载数据
					</span>
				</li>
				<li>
					xhr.<a href="">onabort</a>
					<span>
						请求被中止，比如用户调用了abort()方法
					</span>
				</li>
				<li>
					xhr.<a href="">onerror</a>
					<span>
						请求失败
					</span>
				</li>
				<li>
					xhr.<a href="">onload</a>
					<span>
						请求成功完成
					</span>
				</li>
				<li>
					xhr.<a href="">ontimeout</a>
					<span>
						用户指定的时限到期，请求还未完成
					</span>
				</li>
				<li>
					xhr.<a href="">onloadend</a>
					<span>
						请求完成，不管成果或失败
					</span>
				</li>
			</ul>
			<h4>[<span>+</span>]方法</h4>
			<ul style="display:none;">
				<li>
					xhr.<a href="">abort()</a>
					<span>
						终止已经发出的HTTP请求 <br>
						ajax.abort();<br>
    					ajax = null;
					</span>
				</li>
				<li>
					xhr.<a href="">getAllResponseHeaders()</a>
					<span>
						getAllResponseHeaders方法返回服务器发来的所有HTTP头信息。格式为字符串，每个头信息之间使用CRLF分隔，如果没有受到服务器回应，该属性返回null。
					</span>
				</li>
				<li>
					xhr.<a href="">getResponseHeader</a>(key)
					<span>
						返回HTTP头信息指定字段的值，如果还没有收到服务器回应或者指定字段不存在，则该属性为null。
					</span>
				</li>
				<li>
					xhr.<a href="">overrideMimeType()</a>
					<span>
						该方法用来指定服务器返回数据的MIME类型。该方法必须在send()之前调用。
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>]响应</h4>
			<ul>
				<li>
					xhr.<a href="">response</a>
					<span>
						只读，返回接收到的数据体
					</span>
				</li>
				<li>
					xhr.<a href="">repsonseType</a>
					<span>
						“”：字符串（默认值）  <br>
						“arraybuffer”：ArrayBuffer对象<br>
						“blob”：Blob对象,blob类型适合读取二进制数据，比如图片文件<br>
						“document”：Document对象,document类型适合返回XML文档的情况<br>
						“json”：JSON对象<br>
						“text”：字符串
					</span>
				</li>
				<li>
					xhr.<a href="">responseText</a>
					<span>
						获得字符串形式的响应数据
					</span>
				</li>
				<li>
					xhr.<a href="">responseXML</a>
					<span>
						获得 XML 形式的响应数据
					</span>
				</li>
			</ul>
		</div>
    </div>
    <div class="u-block">
        <h3>Web Socket<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 实例属性</h4>
            <ul>
                <li>
                    <a href="">new WebSocket</a>(url)
                    <span>
                        url格式为ws://path:80
                    </span>
                </li>
                <li>
                    ws.<a href="">readyState</a>
                    <span>
                        返回实例对象的当前状态 <br>
                        CONNECTING：值为0，表示正在连接。 <br>
                        OPEN：值为1，表示连接成功，可以通信了。<br>
                        CLOSING：值为2，表示连接正在关闭。<br>
                        CLOSED：值为3，表示连接已经关闭，或者打开连接失败。<br>
                    </span>
                </li>
                <li>
                    ws.<a href="">bufferedAmount</a>
                    <span>
                        表示还有多少字节的二进制数据没有发送出去。它可以用来判断发送是否结束。
                    </span>
                </li>
                <li>
                    ws.<a href="">send</a>(data)
                    <span>
                        实例对象的send()方法用于向服务器发送数据
                    </span>
                </li>
                <li><a href="https://github.com/socketio/socket.io">socket.io</a></li>
            </ul>
            <h4>[<span>-</span>] 相关事件</h4>
            <ul>
                <li>
                    ws.<a href="">onopen</a>(fn)
                    <span>
                        指定连接成功后的回调函数 <br>
                        如果要指定多个回调函数，可以使用addEventListener方法。
                    </span>
                </li>
                <li>
                    ws.<a href="">onclose</a>(fn)
                    <span>
                        指定连接关闭后的回调函数
                    </span>
                </li>
                <li>
                    ws.<a href="">onmessage</a>(fn)
                    <span>
                        指定收到服务器数据后的回调函数
                    </span>
                </li>
                <li>
                    ws.<a href="">onerror</a>(fn)
                    <span>
                        用于指定报错时的回调函数
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>网络<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] Web Workers</h4>
            <ul>
                <li>
                    <a href="">new Worker</a>(file.js)
                    <span>
                        当在 HTML 页面中执行脚本时，页面的状态是不可响应的，直到脚本已完成。 <br>
                        web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行。
                    </span>
                </li>
                <li>
                    wk.<a href="">terminate()</a>
                    <span>
                        终止 web worker，并释放浏览器/计算机资源
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] CORS</h4>
            <ul>
                <li><a href="http://javascript.ruanyifeng.com/bom/cors.html">CORS</a></li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>Web API<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] SSE (服务器->页面)</h4>
            <ul>
                <li>
                    <a href="">new EventSource</a>('url')
                    <span>
                        EventSource 对象用于接收服务器发送事件通知，url规定发送更新的页面
                    </span>
                </li>
                <li>
                    sse.<a href="">onmessage</a>(fn)
                    <span>
                        e.data 接受的数据 <br>
                        <a href="http://www.runoob.com/html/html5-serversentevents.html">参考资料</a>
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] Notifications (页面->桌面)</h4>
            <ul>
                <li>
                    Notification.<a href="">permission</a>
                    <span>
                        用于读取用户给予的权限，它是一个只读属性，它有三种状态 <br>
                        default：用户还没有做出任何许可，因此不会弹出通知。 <br>
                        granted：用户明确同意接收通知。 <br>
                        denied：用户明确拒绝接收通知。
                    </span>
                </li>
                <li>
                    Notification.<a href="">requestPermission()</a>
                    <span>
                        Notification.requestPermission方法用于让用户做出选择，到底是否接收通知。它的参数是一个回调函数，该函数可以接收用户授权状态作为参数。
                    </span>
                </li>
                <li>
                    <a href="">new Notification</a><em>(title,[option])</em>
                    <span>
                        Notification构造函数的title属性是必须的，用来指定通知的标题，格式为字符串。options属性是可选的，格式为一个对象，用来设定各种设置。 <hr>
                        body：通知内容，格式为字符串，用来进一步说明通知的目的。<br>
                        dir：文字方向，可能的值为 auto、ltr（从左到右）和rtl（从右到左），一般是继承浏览器的设置。 <br>
                        lang：使用的语种，比如 en-US、zh-CN。<br>
                        tag：通知的 ID，格式为字符串。一组相同tag的通知，不会同时显示，只会在用户关闭前一个通知后，在原位置显示。<br>
                        icon：图标的 URL，用来显示在通知上。
                    </span>
                </li>
                <li>
                    nt.<a href="">onshow</a>
                    <span>
                        通知显示给用户时触发该事件
                    </span>
                </li>
                <li>
                    nt.<a href="">onclick</a>
                    <span>
                        用户点击通知时触发
                    </span>
                </li>
                <li>
                    nt.<a href="">onclose</a>
                    <span>
                        用户关闭通知时触发
                    </span>
                </li>
                <li>
                    nt.<a href="">error</a>
                    <span>
                        通知出错时触发（大多数发生在通知无法正确显示时）
                    </span>
                </li>
            </ul>
        </div>
    </div>
</div>