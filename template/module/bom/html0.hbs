<div class="u-col">
    <div class="u-block">
        <h3>Event<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 监听触发</h4>
            <ul>
                <li class="i-dot-orange">
                    dom.<a href="">addEventListener</a><em>(type,fn(e)[,false])</em>
                    <span>
                        添加事件监听 <br>
                        内部的this对象总是指向触发事件的那个节点。 <br>
                        IE8=-：attachEvent() <br>
                        <pre><code data-language="javascript">
                            if (document.addEventListener) {
                                document.addEventListener("click", myFunction);
                            } else if (document.attachEvent) {
                                document.attachEvent("onclick", myFunction);
                            }
                            function myFunction() {
                                alert("Hello World!");
                            }
                        </code></pre>
                        <hr>
                        type：事件名称，大小写敏感。<br>
                        listener：监听函数。事件发生时，会调用该监听函数。<br>
                        useCapture：布尔值，表示监听函数是否在捕获阶段（capture）触发（参见后文《事件的传播》部分），默认为false（监听函数只在冒泡阶段被触发）。老式浏览器规定该参数必写，较新版本的浏览器允许该参数可选。为了保持兼容，建议总是写上该参数。 
                    </span>
                </li>
                <li class="i-dot-orange">
                    dom.<a href="">removeEventListener</a><em>(type,fn(e)[,false])</em>
                    <span>
                        移除事件监听 <br>
                        IE8=-：detachEvent() <br>
                        两个参数均为必须，指定要移除的事件及要移除的函数。
                    </span>
                </li>
                <li>
                    dom.<a href="">dispatchEvent</a>(event)
                    <span>
                        触发事件,参数是一个Event对象的实例 <br>
                        dispatchEvent方法在当前节点上触发指定事件，从而触发监听函数的执行。该方法返回一个布尔值，只要有一个监听函数调用了Event.preventDefault()，则返回值为false，否则为true。 <hr>
<pre><code data-language="javascript">
    para.addEventListener('click', hello, false);
    var event = new Event('click');
    para.dispatchEvent(event);
</code></pre>
                    </span>
                </li>
                <li>
                    <em>bind</em><a href=""></a>
                    <span>
                        HTML中:<pre><code data-language="html"><element onclick="fn()"></code></pre>
                        JavaScript 中:<pre><code data-language="javascript">object.onclick=function(){..};</code></pre>
                        JS中监听：<pre><code data-language="javascript">object.addEventListener('click',fn)</code></pre>
                        <hr>
                        当监听函数部署在Element节点的on-属性上面，this不会指向触发事件的元素节点，除非函数内容也写在标签中写明。 <a href="http://javascript.ruanyifeng.com/dom/event.html">参考资料</a>
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 自定义事件</h4>
            <ul>
                <li>
                    <a href="">new CustomEvent</a>(type,option)
                    <span>
                        <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CustomEvent">参考资料</a> <br>
                        CustomEvent构造函数的第一个参数是事件名称，第二个参数是一个对象，可传递数据 <br>
                        <a href="http://javascript.ruanyifeng.com/dom/event.html#toc21">IE模拟支持</a>
<pre><code data-language="javascript">
(function () {
  function CustomEvent ( event, params ) {
    params = params || { bubbles: false, cancelable: false, detail: undefined };
    var evt = document.createEvent( 'CustomEvent' );
    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
    return evt;
   }

  CustomEvent.prototype = window.Event.prototype;

  window.CustomEvent = CustomEvent;
})();
</code></pre>
                    </span>
                </li>
                <li>
                    document.<a href="">createEvent</a>($etype)
                    <span>
                        var event = document.createEvent('Event') <br>
                        createEvent方法接受一个字符串作为参数，可能的值参见下表“数据类型”一栏。使用了某一种“事件类型”，就必须使用对应的事件初始化方法。
                        <table>
                            <tr>
                                <th>事件类型</th>
                                <th>事件初始化方法</th>
                            </tr>
                            <tr>
                                <td>UIEvents</td>
                                <td>event.initUIEvent</td>
                            </tr>
                            <tr>
                                <td>MouseEvents</td>
                                <td>event.initMouseEvent</td>
                            </tr>
                            <tr>
                                <td>MutationEvents</td>
                                <td>event.initMutationEvent</td>
                            </tr>
                            <tr>
                                <td>HTMLEvents</td>
                                <td>event.initEvent</td>
                            </tr>
                            <tr>
                                <td>Event</td>
                                <td>event.initEvent</td>
                            </tr>
                            <tr>
                                <td>CustomEvent</td>
                                <td>event.initCustomEvent</td>
                            </tr>
                            <tr>
                                <td>KeyboardEvent</td>
                                <td>event.initKeyEvent</td>
                            </tr>
                        </table>
                    </span>
                </li>
                <li>
                    event.<a href="">initEvent</a><em>(type,true,true,data)</em>
                    <span>
                        事件对象的initEvent方法，用来初始化事件对象，还能向事件对象添加属性。该方法的参数必须是一个使用Document.createEvent()生成的Event实例，而且必须在dispatchEvent方法之前调用。
<pre><code data-language="javascript">
    var event = document.createEvent('Event');
    event.initEvent('my-custom-event', true, true, {foo:'bar'});
    someElement.dispatchEvent(event);
</code></pre>
                    4个参数： <br>
                    type：事件名称，格式为字符串。<br>
                    bubbles：事件是否应该冒泡，格式为布尔值。可以使用event.bubbles属性读取它的值。<br>
                    cancelable：事件是否能被取消，格式为布尔值。可以使用event.cancelable属性读取它的值。<br>
                    option：为事件对象指定额外的属性。
                    </span>
                </li>
                <li>
                    <a href="">UIEvent</a>
                    <span>
                        <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/UIEvent">参考资料</a>
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 事件对象</h4>
            <ul>
                <li>
                    <a href="">new Event</a>(type[,option])
                    <span>
                        <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event">参考资料</a> <br>事件发生以后，会生成一个事件对象，作为参数传给监听函数。浏览器原生提供一个Event对象，所有的事件都是这个对象的实例，或者说继承了Event.prototype对象。Event对象本身就是一个构造函数，可以用来生成新的实例。 <hr>
                        bubbles：布尔值，可选，默认为false，表示事件对象是否冒泡。<br>
                        cancelable：布尔值，可选，默认为false，表示事件是否可以被取消。 <br>
<pre><code data-language="javascript">
var ev = new Event(
  'look',
  {
    'bubbles': true,
    'cancelable': false
  }
);
document.dispatchEvent(ev);
</code></pre>
                        IE8及以下版本，事件对象不作为参数传递，而是通过window对象的event属性读取，并且事件对象的target属性叫做srcElement属性。所以，以前获取事件信息，往往要写成下面这样。
<pre><code data-language="javascript">
function myEventHandler(event) {
  var actualEvent = event || window.event;
  var actualTarget = actualEvent.target || actualEvent.srcElement;
  // ...
}
</code></pre>
                    </span>
                </li>
                <li>
                    e.<a href="">type</a>
                    <span>
                        返回当前 Event 对象表示的事件的名称
                    </span>
                </li>
                <li>
                    e.<a href="">target</a>
                    <span>
                        返回触发此事件的元素（事件的目标节点）
                    </span>
                </li>
                <li>
                    e.<a href="">currentTarget</a>
                    <span>
                        返回其事件监听器触发该事件的元素,不一定是点击的元素,是最终监听的元素
                    </span>
                </li>
                <li>
                    e.<a href="">bubbles</a>
                    <span>
                       返回布尔值，指示事件是否是起泡事件类型 
                    </span>
                </li>
                <li>
                    e.<a href="">cancelable</a>
                    <span>
                        返回布尔值，指示事件是否可拥可取消的默认动作
                    </span>
                </li>
                <li>
                    e.<a href="">defaultPrevented</a>
                    <span>
                        返回一个布尔值，表示该事件是否调用过preventDefault方法
                    </span>
                </li>
                <li>
                    e.<a href="">timeStamp</a>
                    <span>
                        返回事件生成的日期和时间 <br>
                        该属性返回的是一个高精度时间戳，也就是说，毫秒之后还带三位小数，精确到微秒。并且，这个值不再从Unix纪元开始计算，而是从PerformanceTiming.navigationStart开始计算，即表示距离用户导航至该网页的时间。如果想将这个值转为Unix纪元时间戳，就要计算event.timeStamp + performance.timing.navigationStart。
                    </span>
                </li>
                <li>
                    e.<a href="">isTrusted</a>
                    <span>
                        返回一个布尔值，表示该事件是否为真实用户触发。
                    </span>
                </li>
                <li>
                    e.<a href="">eventPhase</a>
                    <span>
                        返回事件传播的当前阶段 <br>
                        0：事件没有发生 <br>
                        1：从window对象传导到目标节点，称为“捕获阶段”（capture phase）。<br>
                        2：在目标节点上触发，称为“目标阶段”（target phase）。<br>
                        3：从目标节点传导回window对象，称为“冒泡阶段”（bubbling phase）。
                    </span>
                </li>
                <li>
                    e.<a href="">preventDefault()</a>
                    <span>
                        通知浏览器不要执行与事件关联的默认动作
                    </span>
                </li>
                <li>
                    e.<a href="">stopPropagation()</a>
                    <span>
                        阻止冒泡. <br>
                        iPhone默认阻止冒泡，故慎用事件委托，给指定元素添加手型样式可开启冒泡，让其认可该为一个可点击区域。
                    </span>
                </li>
                <li>
                    e.<a href="">stopImmediatePropagation()</a>
                    <span>
                        stopPropagation方法只会阻止当前监听函数的传播，不会阻止节点上的其他click事件的监听函数。如果想要不再触发那些监听函数，可以使用stopImmediatePropagation方法。
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>加载事件<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 进度事件</h4>
            <ul>
                <li>
                    <a href="">new ProgressEvent</a>
                    <span>
                        进度事件用来描述一个事件进展的过程，比如XMLHttpRequest对象发出的HTTP请求的过程、img、audio、video、style、link加载外部资源的过程。下载和上传都会发生进度事件。 <br>
                        <b>lengthComputable</b>：<br>返回一个布尔值，表示当前进度是否具有可计算的长度。如果为false，就表示当前进度无法测量。<br>
                        <b>total</b>：<br>返回一个数值，表示当前进度的总长度。如果是通过HTTP下载某个资源，表示内容本身的长度，不含HTTP头部的长度。如果lengthComputable属性为false，则total属性就无法取得正确的值。<br>
                        <b>loaded</b>：<br>返回一个数值，表示当前进度已经完成的数量。该属性除以total属性，就可以得到目前进度的百分比。
                    </span>
                </li>
                <li>
                    <a href="">abort</a>
                    <span>
                        当进度事件被中止时触发。如果发生错误，导致进程中止，不会触发该事件。
                    </span>
                </li>
                <li>
                    <a href="">error</a>
                    <span>
                        由于错误导致资源无法加载时触发 <br>
                        包括img/input-type-img/object/script/style/body/frameset等 <br>
                        不支持冒泡，不可取消
                    </span>
                </li>
                <li>
                    <a href="">load</a>
                    <span>
                        进度成功结束时触发 <br>
                        有时候，图片加载会在脚本运行之前就完成，尤其是当脚本放置在网页底部的时候，因此有可能使得load和error事件的监听函数根本不会被执行。所以，比较可靠的方式，是用complete属性先判断一下是否加载完成。 <br>
<pre><code data-language="javascript">
    function loaded() {
      // code after image loaded
    }

    if (image.complete) {
      loaded();
    } else {
      image.addEventListener('load', loaded);
    }
</code></pre>
由于DOM没有提供像complete属性那样的，判断是否发生加载错误的属性，所以error事件的监听函数最好放在img元素的HTML属性中，这样才能保证发生加载错误时百分之百会执行。
<pre><code data-language="javascript">
    <img src="/wrong/url" onerror="this.style.display='none';" />
</code></pre>
                    </span>
                </li>
                <li>
                    <a href="">loadstart</a>
                    <span>
                        进度开始时触发
                    </span>
                </li>
                <li>
                    <a href="">loadend</a>
                    <span>
                        进度停止时触发，发生顺序排在error事件\abort事件\load事件后面
                    </span>
                </li>
                <li>
                    <a href="">progress</a>
                    <span>
                        当操作处于进度之中，由传输的数据块不断触发
                    </span>
                </li>
                <li>
                    <a href="">timeout</a>
                    <span>
                        进度超过限时触发
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 文档事件</h4>
            <ul>
                <li>
                    <a href="">DOMContentLoaded</a>
                    <span>
                        页面解析完成（IE9+） <a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded">参考资料</a> <br>
                        当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架de完成加载。 <hr>
                        DOM文档加载的步骤为:
                        <ol>
                            <li>解析HTML结构。</li>
                            <li>加载外部脚本和样式表文件。</li>
                            <li>解析并执行脚本代码。</li>
                            <li>DOM树构建完成。//DOMContentLoaded</li>
                            <li>加载图片等外部文件。</li>
                            <li>页面加载完毕。//load</li>
                        </ol>
                        <hr>
                        注意，网页的JavaScript脚本是同步执行的，所以定义DOMContentLoaded事件的监听函数，应该放在所有脚本的最前面。否则脚本一旦发生堵塞，将推迟触发DOMContentLoaded事件。 <br>
                        IE8及以下不支持
                    </span>
                </li>
                <li>
                    <a href="">readystatechange</a>
                    <span>
                        readystatechange事件发生在Document对象和XMLHttpRequest对象，当它们的readyState属性发生变化时触发。 <br>
                        IE8不支持DOMContentLoaded事件，但是支持这个事件。因此，可以使用readystatechange事件，在低版本的IE中代替DOMContentLoaded事件。
                    </span>
                </li>
                <li>
                    <a href="">beforeunload</a>
                    <span>
                        该事件在即将离开页面（刷新或关闭）时触发 <br>
                        只要在该事件的回调函数中，调用了event.preventDefault()，或者event.returnValue属性的值是一个非空的值，就会自动跳出一个确认框，让用户确认是否关闭网页。如果用户点击“取消”按钮，网页就不会关闭。 <br>
<pre><code data-language="javascript">
    window.addEventListener('beforeunload', function (e) {
      var confirmationMessage = '确认关闭窗口？';

      e.returnValue = confirmationMessage;
      return confirmationMessage;
    });;
</code></pre>       
                    </span>
                </li>
                <li>
                    <a href="">load/error</a>
                    <span>
                        load事件在页面加载成功时触发，error事件在页面加载失败时触发。<br>
                        注意，页面从浏览器缓存加载，并不会触发load事件。
                    </span>
                </li>
                <li class="i-dot-orange">
                    <a href="">pageshow/pagehide</a>
                    <span>
                        该事件在用户访问页面时触发、离开当前网页跳转到另外一个页面时触发 <br>
                        类似于 onload 事件，onload 事件在页面第一次加载时触发， onpageshow 事件在每次加载页面时触发，即 onload 事件在页面从浏览器缓存中读取时不触发。第一次加载时，它的触发顺序排在load事件后面。 <hr>
                        <b>e.persisted ? true/false</b> <br>
                        为了查看页面是直接从服务器上载入还是从缓存中读取，你可以使用 PageTransitionEvent 对象的  属性来判断。 如果页面从浏览器的缓存中读取该属性返回 ture，否则返回 false。<br>
                        IE10及以下不支持
                    </span>
                </li>
                <li>
                    <a href="">scroll</a>
                    <span>
                        当文档被滚动时发生的事件 <br>
                        由于该事件会连续地大量触发，所以它的监听函数之中不应该有非常耗费计算的操作。推荐的做法是使用requestAnimationFrame或setTimeout控制该事件的触发频率，然后可以结合customEvent抛出一个新事件。 <br>
<pre><code data-language="javascript">
    (function() {
      var throttle = function(type, name, obj) {
        var obj = obj || window;
        var running = false;
        var func = function() {
          if (running) { return; }
          running = true;
          requestAnimationFrame(function() {
            obj.dispatchEvent(new CustomEvent(name));
            running = false;
          });
        };
        obj.addEventListener(type, func);
      };

      // 将scroll事件重定义为optimizedScroll事件
      throttle('scroll', 'optimizedScroll');
    })();

    window.addEventListener('optimizedScroll', function() {
      console.log("Resource conscious scroll callback!");
    });
</code></pre>
                    </span>
                </li>
                <li>
                    <a href="">resize</a>
                    <span>
                        窗口或框架被重新调整大小(window、body、frameset) <br>
                        该事件也会连续地大量触发，所以最好像上面的scroll事件一样，通过throttle函数控制事件触发频率。
                    </span>
                </li>
                <li>
                    <a href="">hashchange</a>
                    <span>
                        该事件在当前 URL 的锚部分发生修改时触发 <br>
                        e.oldURL 变化前URL <br>
                        e.newURL 变化后URL <hr>
                        <a href="http://javascript.ruanyifeng.com/bom/same-origin.html">同源政策中iframe通讯的应用</a>
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>交互事件<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 焦点事件</h4>
            <ul>
                <li>
                    <a href="">focus</a>
                    <span>
                        对象获得焦点时发生，不支持冒泡 <br>
                        通常用于 input, select, 和a.  <br>
                        由于focus和blur事件不会冒泡，只能在捕获阶段触发，所以addEventListener方法的第三个参数需要设为true。
                    </span>
                </li>
                <li>
                    <a href="">blur</a>
                    <span>
                        对象失去焦点时发生，不支持冒泡 <br>
                        经常用于Javascript验证代码，一般用于表单输入框
                    </span>
                </li>
                <li>
                    <a href="">focusin</a>
                    <span>
                        元素即将获取焦点时触发，支持冒泡，Firefox不支持
                    </span>
                </li>
                <li>
                    <a href="">focusout</a>
                    <span>
                        元素即将失去焦点时触发，支持冒泡，Firefox不支持
                    </span>
                </li>
                <li>
                    e.<a href="">target</a>
                    <span>
                        返回事件的目标节点
                    </span>
                </li>
                <li>
                    e.<a href="">relatedTarget</a>
                    <span>
                        返回一个element节点
                        <table>
                            <tr>
                                <th>事件类型</th>
                                <th>相关节点</th>
                            </tr>
                            <tr>
                                <td>focusin</td>
                                <td>失去焦点的节点</td>
                            </tr>
                            <tr>
                                <td>focusout</td>
                                <td>将要接受焦点的节点</td>
                            </tr>
                        </table>
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 表单事件</h4>
            <ul>
                <li>
                    <a href="">change</a>
                    <span>
                        表单元素的内容改变时触发 <br>
                        域的内容改变时发生，也可用于单选框与复选框改变后触发的事件。<br>
                        常用于input, keygen, select, textarea。 <hr>
                        change事件与input事件的最大不同，就是不会连续触发，只有当全部修改完成时才会触发 <br>
                        激活单选框（radio）或复选框（checkbox）时触发。<br>
                        用户提交时触发。比如，从下列列表（select）完成选择，在日期或文件输入框完成选择。<br>
                        当文本框或textarea元素的值发生改变，并且丧失焦点时触发。
                    </span>
                </li>
                <li class="i-dot-orange">
                    <a href="">input</a>
                    <span>
                        元素获取用户输入时触发 <br>
                        该事件仅在input或textarea元素的值发生改变时触发，打开contenteditable属性的元素，只要值发生变化，也会触发input事件。。 <br>
                        input事件的一个特点，就是会连续触发，比如用户每次按下一次按键，就会触发一次input事件。<br>
                        oninput事件在元素值发生变化是立即触发，onchange在元素失去焦点时触发 <br>
                        IE8及以下不支持
                    </span>
                </li>
                <li>
                    <a href="">select</a>
                    <span>
                        仅在“文本框”(input/textarea)中的文本被选中时发生
                    </span>
                </li>
                <li>
                    <a href="">reset</a>
                    <span>
                        表单重置时触发
                    </span>
                </li>
                <li>
                    <a href="">submit</a>
                    <span>
                        在表单提交时触发 <br>
                        注意，submit事件的发生对象是form元素，而不是button元素（即使它的类型是submit），因为提交的是表单，而不是按钮。
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 剪贴板事件</h4>
            <ul>
                <li>
                    <a href="">copy</a>
                    <span>
                        用户拷贝元素上的内容时触发（包括img）
                    </span>
                </li>
                <li>
                    <a href="">cut</a>
                    <span>
                        用户剪切元素内容时触发 <br>
                        对于不可编辑的元素，除非设置contenteditable 为 "true" 
                    </span>
                </li>
                <li>
                    <a href="">paste</a>
                    <span>
                        用户粘贴元素内容时触发 <br>
                        对于不可编辑的元素，除非设置contenteditable 为 "true" 
                    </span>
                </li>
                <li>
                    e.<a href="">clipboardData</a>
                    <span>
                        该属性存放剪贴的数据,只读属性
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>其它事件<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 动画事件</h4>
            <ul>
                <li>
                    <a href="">animationstart</a>
                    <span>
                        css动画开始时触发 <br>
                        webkitAnimationStart / mozAnimationStart
                    </span>
                </li>
                <li>
                    <a href="">animationiteration</a>
                    <span>
                        css动画重复播放时触发 <br>
                        webkitAnimationInteration / mozAnimationInteration
                    </span>
                </li>
                <li>
                    <a href="">animationend</a>
                    <span>
                        css动画结束时触发 <br>
                        webkitAnimationEnd / mozAnimationEnd
                    </span>
                </li>
                <li>
                    <a href="">transitionend</a>
                    <span>
                        css完成过渡后触发 <br>
                        如果过渡在完成前移除，例如 CSS transition-property 属性被移除，过渡事件将不被触发 <br>
                        webkitTransitionEnd / mozTransitionEnd / oTransitionEnd
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 其它事件</h4>
            <ul>
                <li>
                    <a href="">message</a>
                    <span>
                        该事件通过或者从对象(WebSocket, Web Worker, Event Source 或者子 frame 或父窗口)接收到消息时触发
                    </span>
                </li>
                <li>
                    <a href="">toggle</a>
                    <span>
                        该事件在用户打开或关闭 <details> 元素时触发
                    </span>
                </li>
                <li>
                    <a href="https://developer.mozilla.org/zh-CN/docs/Web/Events">more..</a>
                </li>
                <li>
                    <a href="">orientationchange</a>
                    <span>
                        屏幕旋转
                    </span>
                </li>
            </ul>
        </div>
    </div>
</div>