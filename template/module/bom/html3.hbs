<div class="u-col">
    <div class="u-block">
        <h3>Cookie<span>-</span></h3>
        <div class="u-list">
            <ul>
                <li>
                    navigator.<a href="">cookieEnabled</a>
                    <span>
                        返回一个布尔值，表示浏览器是否打开 Cookie 功能。
                    </span>
                </li>
                <li>
                    document.<a href="">cookie</a>
                    <span>
                        Cookie 的值必须写成key=value的形式。 <br>
                        注意，等号两边不能有空格。 <br>
                        另外，写入 Cookie 的时候，必须对分号、逗号和空格进行转义（它们都不允许作为 Cookie 的值），这可以用encodeURIComponent方法达到。 <br>
                        document.cookie一次只能写入一个 Cookie，而且写入并不是覆盖，而是添加，读取的时候一次性读取全部。  <br>
                        删除一个 Cookie 的唯一方法是设置其expires为一个过去的日期。
                        <hr>
                        expires : 指定cookie过期时间，格式采用Date.toUTCString()的格式 <br>
                        domain : 指定cookie所在的域名 <br>
                        path : 用来指定路径，必须是绝对路径（比如/、/mydir），如果未指定，默认为请求该 Cookie 的网页路径。 <br>
                        secure : 指定Cookie只能在加密协议HTTPS下发送到服务器 <br>
                        max-age : 指定Cookie有效期，比如60 * 60 * 24 * 365（即一年31536e3秒） <br>
                        HttpOnly : 设置该Cookie不能被JavaScript读取 <br>
                    </span>
                </li>
                <li>
                    document.<a href="">domain</a>
                    <span>
                        Cookie 是服务器写入浏览器的一小段信息，只有同源的网页才能共享。但是，两个网页一级域名相同，只是二级域名不同，浏览器允许通过设置document.domain共享 Cookie。同样适应于iframe通信获取DOM。
                    </span>
                </li>
                <li>
                    <a href="https://github.com/js-cookie/js-cookie">js-cookie</a>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>Storage<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 数据对象</h4>
            <ul>
                <li>
                    <a href="">localStorage</a>
                    <span>
                        保存的数据长期存在，下一次访问该网站的时候，网页可以直接读取以前保存的数据。
                    </span>
                </li>
                <li>
                    <a href="">sessionStorage</a>
                    <span>
                        保存的数据用于浏览器的一次会话，当会话结束（通常是该窗口关闭），数据被清空
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 数据操作</h4>
            <ul>
                <li>
                    storage.<a href="">setItem</a>('key','val')
                    <span>
                        存储数据
                    </span>
                </li>
                <li>
                    storage.<a href="">getItem</a>('key')
                    <span>
                        读取数据
                    </span>
                </li>
                <li>
                    storage.<a href="">removeItem</a>('key')
                    <span>
                        删除数据
                    </span>
                </li>
                <li>
                    storage.<a href="">clear()</a>
                    <span>
                        清空数据
                    </span>
                </li>
                <li>
                    storage.<a href="">key</a>(n)
                    <span>
                        获取索引的键名
                    </span>
                </li>
                <li>
                    storage.<a href="">length</a>
                    <span>
                        数据长度
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 事件对象</h4>
            <ul>
            	<li>
                    <em>[event]</em><a href="">storage</a>
                    <span>
                        该事件在 Web Storage(HTML 5 Web 存储)更新时触发 <br>
                        值得特别注意的是，该事件不在导致数据变化的当前页面触发。如果浏览器同时打开一个域名下面的多个页面，当其中的一个页面改变sessionStorage或localStorage的数据时，其他所有页面的storage事件会被触发，而原始页面并不触发storage事件。可以通过这种机制，实现多个窗口之间的通信。所有浏览器之中，只有IE浏览器除外，它会在所有页面触发storage事件。
                    </span>
                </li>
                <li>
                    e.<a href="">key</a>
                    <span>
                        发生变化的键名
                    </span>
                </li>
                <li>
                    e.<a href="">oldValue</a>
                    <span>
                        更新前的值。如果该键为新增加，则这个属性为null。
                    </span>
                </li>
                <li>
                    e.<a href="">newValue</a>
                    <span>
                        更新后的值。如果该键被删除，则这个属性为null。
                    </span>
                </li>
                <li>
                    e.<a href="">url</a>
                    <span>
                        原始触发storage事件的那个网页的网址。
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>IndexedDB<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 数据库事件</h4>
            <ul>
                <li>
                    <a href="">indexedDB</a>
                    <span>
                        1.键值对存储。 <br>
                        2.异步 <br>
                        3.支持事务 <br>
                        4.同域限制 <br>
                        5.存储空间大 <br>
                        6.支持二进制存储 <br>
                        <a href="http://javascript.ruanyifeng.com/bom/indexeddb.html">参考资料</a>
                    </span>
                </li>
                <li>
                    <a href="">indexedDB.open</a>('name',[ver])
                    <span>
                        打开数据库（ver>=1）。返回一个对象IDBOpenDBRequest  <br>
                        var openRequest = indexedDB.open("test",1);
                    </span>
                </li>
                <li>
                    open.<a href="">onupgradeneeded</a>
                    <span>
                        第一次打开该数据库，或者数据库版本发生变化
                    </span>
                </li>
                <li>
                    open.<a href="">onsuccess</a>
                    <span>
                        打开成功
                    </span>
                </li>
                <li>
                    open.<a href="">error</a>
                    <span>
                        打开失败
                    </span>
                </li>
                <li>
                    open.<a href="">blocked</a>
                    <span>
                        上一次的数据库连接还未关闭
                    </span>
                </li>
                <li>
                    e.<a href="">target.result</a>
                    <span>
                        打开的IndexedDB数据库 <br>
                        当成功时，等价于 open.result
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 数据库实例</h4>
            <ul>
                <li>
                    db.<a href="">objectStoreNames.contains</a>('store')
                    <span>
                        检查数据库是否包含某个“对象仓库”
                    </span>
                </li>
                <li>
                    db.<a href="">createObjectStore</a><em>('store',[option])</em>
                    <span>
                        创建存放数据的“对象仓库”（object store） <br>
                        如果该对象仓库已经存在，就会抛出一个错误。 <br>
                        keyPath : 指定属性作为键名 <br>
                        autoIncrement : 使用自动递增的整数作为键名 1++
                    </span>
                </li>
                <li>
                    db.<a href="">transaction</a><em>(['store'],'readwrite')</em>
                    <span>
                        创建一个数据库事务。向数据库添加数据之前，必须先创建数据库事务。 <br>
                        第一个参数是一个数组，里面是所涉及的对象仓库，通常是只有一个； <br>
                        第二个参数是一个表示操作类型的字符串。目前，操作类型只有两种：readonly（只读）和readwrite（读写）。添加数据使用readwrite，读取数据使用readonly。 <br>
                        transaction方法返回一个事务对象，该对象的objectStore方法用于获取指定的对象仓库。
<pre><code data-language="javascript">
    var t = db.transaction(["firstOS"],"readwrite");
    var store = t.objectStore("firstOS");
</code></pre>
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 事务对象</h4>
            <ul>
                <li>
                    tsc.<a href="">objectStore</a>('store')
                    <span>
                        获取指定的对象仓库
                    </span>
                </li>
                <li>
                    tsc.<a href="">onabort</a>
                    <span>
                        事务中断
                    </span>
                </li>
                <li>
                    tsc.<a href="">complete</a>
                    <span>
                        事务完成
                    </span>
                </li>
                <li>
                    tsc.<a href="">error</a>
                    <span>
                        事务出错
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 对象仓库</h4>
            <ul>
                <li>
                    store.<a href="">add</a>(value,key)
                    <span>
                        add方法的第一个参数是所要添加的数据，第二个参数是这条数据对应的键名（key），上面代码将对象o的键名设为1。如果在创建数据仓库时，对键名做了设置，这里也可以不指定键名。 <hr>
                        add方法是异步的，有自己的success和error事件，可以对这两个事件指定回调函数。 <br>
<pre><code data-language="javascript">
    var request = store.add(o,1);

    request.onerror = function(e) {
         console.log("Error",e.target.error.name);
        // error handler
    }

    request.onsuccess = function(e) {
        console.log("数据添加成功！");
    }
</code></pre>
                    </span>
                </li>
                <li>
                    store.<a href="">get</a>(key)
                    <span>
                        读取数据使用get方法，它的参数是数据的键名。 <br>
                        get方法也是异步的，会触发自己的success和error事件，可以对它们指定回调函数。
                    </span>
                </li>
                <li>
                    store.<a href="">put</a>(value,key)
                    <span>
                        更新记录
                    </span>
                </li>
                <li>
                    store.<a href="">delete</a>(key)
                    <span>
                        删除记录 <br>
                        delete也是一个异步操作，可以为它指定回调函数
                    </span>
                </li>
                <li>
                    store.<a href="">openCursor()</a>
                    <span>
                        遍历数据 <br>
                        openCursor方法也是异步的，有自己的success和error事件，可以对它们指定回调函数。
                    </span>
                </li>
                <li>
                    store.<a href="">createIndex</a><em>(index,key,option)</em>
                    <span>
                        创建索引 <br>
                        createIndex方法接受三个参数，第一个是索引名称，第二个是建立索引的属性名，第三个是参数对象，用来设置索引特性。
                    </span>
                </li>
                <li>
                    store.<a href="">index</a>(index)
                    <span>
                        从对象仓库返回指定的索引
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>Web SQL<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] Web SQL</h4>
            <ul>
                <li>
                    <a href="">openDatabase</a>
                    <span>
                        使用现有的数据库或者新建的数据库创建一个数据库对象 <br>
                        参数：数据库名称、版本号、描述文本、数据库大小、创建回调 <br>
                        var db = openDatabase('mydb', '1.0', 'Test DB', 2 * 1024 * 1024); <br>
                        创建回调会在创建数据库后被调用
                    </span>
                </li>
                <li>
                    db.<a href="">transaction</a>(fn)
                    <span>
                        控制一个事务，以及基于这种情况执行提交或者回滚 <br>
                        <a href="http://www.runoob.com/html/html5-web-sql.html">参考资料</a>
                    </span>
                </li>
                <li>
                    <a href="">executeSql</a>(sql)
                    <span>
                        执行实际的 SQL 查询
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>File API<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 文件</h4>
            <ul>
                <li>
                    <a href="">new File()</a>
                    <span>
                        通常情况下， File 对象是来自用户在一个input元素上选择文件后返回的 FileList 对象,也可以是来自由拖放操作生成的 DataTransfer 对象，或者来自 HTMLCanvasElement 上的 mozGetAsFile() API。
                    </span>
                </li>
                <li>
                    file.<a href="">lastModified</a>
                    <span>
                        返回当前 File 对象所引用文件最后修改时间， 自 1970年1月1日0:00 以来的毫秒数。
                    </span>
                </li>
                <li>
                    file.<a href="">name</a>
                    <span>
                        返回当前 File 对象所引用文件的名字
                    </span>
                </li>
                <li>
                    file.<a href="">size</a>
                    <span>
                        返回文件的大小
                    </span>
                </li>
                <li>
                    file.<a href="">type</a>
                    <span>
                        返回文件的MIME类型
                    </span>
                </li>
                <li>
                    <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader">fileReader</a>
                </li>
                <li>
                    <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME类型</a>
                </li>
            </ul>
        </div>
    </div>
</div>
