<div class="u-col">
    <div class="u-block">
        <h3>Flask<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] CLI</h4>
            <ul>
                <li>
                    <a href="">config</a>
                    <span>
                        应用模块： export FLASK_APP=$name <br>
                        环境设置： export FLASK_ENV=development|production <br>
                        调试开启： export FLASK_DEBUG=1|0 <br>
                        启动应用： flask run
                    </span>
                </li>
                <li>
                    <a href="">app.run</a>(ip,port)
                    <span>
                        app.run(host = '0.0.0.0', port = '8080')
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 路由</h4>
            <ul>
                <li>
                    <a href="">@app.route</a>('path',methods)
                    <span>
                        用 route 装饰器将一个url规则绑定到一个视图函数上<br>
                        @app.route('path/&lt;path:subpath&gt;')
                        <table>
                            <thead>
                            <tr>
                            <th>类型</th>
                            <th>含义</th>
                            </tr>
                            </thead>
                            <tbody><tr>
                            <td>string</td>
                            <td>默认的数据类型，接受没有任何斜杠“/”的字符串</td>
                            </tr>
                            <tr>
                            <td>int</td>
                            <td>接受整型</td>
                            </tr>
                            <tr>
                            <td>float</td>
                            <td>接受浮点类型</td>
                            </tr>
                            <tr>
                            <td>path</td>
                            <td>和 string 类似，但是接受斜杠“/”</td>
                            </tr>
                            <tr>
                            <td>uuid</td>
                            <td>只接受 uuid 字符串</td>
                            </tr>
                            </tbody>
                        </table>

                        @app.route('/login', methods=['GET', 'POST']) <br>
                        路由默认只回应GET请求，当需要回应多种请求时，可以列出
                    </span>
                </li>
                <li>
                    <a href="">app.add_url_route</a>('path',view_func=fn)
                    <span>
                        调用 add_url_route() 为函数指定一个路由 <br>
                        def test():.. <br>
                        app.add_url_route('path',view_func=test)
                    </span>
                </li>
                <li>
                    static<a href=""></a>
                    <span>
                        改变默认的静态目录路径 ：app = Flask(__name__,static_folder='assets') 或使用/开头的绝对路径 <br>
                        改变默认的静态目录访问规则：app = Flask(__name__,static_folder='assets',static_url_path='/assets')
                    </span>
                </li>
                <li>
                    endpoint<a href=""></a>
                    <span>
                        可自定义端点名 <br>
                        使用装饰器时，默认函数名则为端点名 <br>
                        根目录默认使用index，静态目录默认使用static <br>
                        @app.route('/home',endpoint='whocare') <br>
                        <a href="https://blog.csdn.net/CoderPai/article/details/80520955">参考资料</a>
                    </span>
                </li>
                <li>
                    <a href="">url_for</a>(point)
                    <span>
                        from flask import url_for <br>
                        url_for('point') 正确路由到另一个端点（视图函数）/point<br>
                        url_for('point',key=val) 添加查询参数 /point?key=val <br>
                        url_for('point',var=sth,key=val) 添加URL变量 <br>
                        url_for('point',_anchor=val) 添加锚点 /point#val <br>
                        url_for('point',_external=True) 生成外部URL http://.. 
                    </span>
                </li>
                <li>
                    <a href="">@app.errorhandler</a>(401)
                    <span>
                        定制指定错误码页面
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 请求</h4>
            <ul>
                <li>
                    <a href="">request.form</a>[name]
                    <span>
                        from flask import request <br>
                        uid = request.form['uid'] post表单提交的请求项
                    </span>
                </li>
                <li>
                    <a href="">request.args</a>[name]
                    <span>
                        q = request.args['q'] get表单提交的查询字符串
                    </span>
                </li>
                <li>
                    <a href="">request.files</a>['the_file']
                    <span>
                        f = request.files['the_file'] <br>  
                        f.save('/var/www/uploads/' + secure_filename(f.filename))
                    </span>
                </li>
                <li>
                    <a href="">request.cookies</a>[key]
                    <span>
                        读取请求方的cookie
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 响应</h4>
            <ul>
                <li>
                    response<a href=""></a>
                    <span>
                        当视图函数返回的是一个形式如(response,status,headers)的元组时， Flask自动根据这几个值构造一个Response对象。 <br>
                        response:['val'] <br>
                        status_code : 200 <br>
                        mimetype:'text/html' <br>
                        header:[(key,val)]
                    </span>
                </li>
                <li>
                    <a href="">make_response</a>(res)
                    <span>
                        
                        make_response() 函数用来构造一个Response对象，第一个参数为响应的正文。 <br>
                        from flask import make_response <br>
                        rsp = make_response('pong')<br>
                        rsp.mimetype = 'text/plain'<br>
                        rsp.headers['x-tag'] = 'sth.magic'<br>
                        return rsp
                    </span>
                </li>
                <li>
                    Response<a href="">.set_cookie</a>()
                    <span>
                        Response.set_cookie( <br>
                            key, //键<br>
                            value='', //值<br>
                            max_age=None, //秒为单位的cookie寿命，None表示http-only<br>
                            expires=None, //失效时间，datetime对象或unix时间戳<br>
                            path='/', //cookie的有效路径<br>
                            domain=None, //cookie的有效域<br>
                            secure=None, <br>
                            httponly=False)
                    </span>
                </li>
                <li>
                    <a href="">redirect</a>(url)
                    <span>
                        from flask import redirect <br>
                        return redirect(location, code=302, Response=None)
                    </span>
                </li>
                <li>
                    <a href="">abort</a>(code)
                    <span>
                        from flask import abort <br>
                        abort(401) 没有权限时可中断请求，而不必返回响应
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 模板</h4>
            <ul>
                <li>
                    <a href="">render_template</a>(file,key=var)
                    <span>
                        from flask import render_template <br>
                        file默认在templates目录下 <br>
                        多个key模板关键字{{key}}映射为变量值
                    </span>
                </li>
                <li>
                    <a href="">{% if .. %}</a>
                    <span>
                        {% if title %}<br>
                        .. <br>
                        {% else %}<br>
                        .. <br>
                        {% endif %}
                    </span>
                </li>
                <li>
                    <a href="">{% for key in arr %}</a>
                    <span>
                        {% for post in posts %}<br>
                        .. <br>
                        {% endfor %}
                    </span>
                </li>
                <li>
                    <a href="">{% extends "header.html" %}</a>
                    <span>
                        {% extends "header.html" %} <br>
                        独立公共文件，在其他文件中继承
                    </span>
                </li>
                <li>
                    <a href="">{% block content %}{% endblock %}</a>
                    <span>
                        {% block content %}{% endblock content%} <br>
                        在公共文件和其他文件中定义content部分的内容是哪些 <br>
                        默认的块不允许访问块外作用域中的变量，可通过添加 scoped 修饰符 <a href="https://docs.pythontab.com/jinja/jinja2/templates.html#id14">参考资料</a>
                    </span>
                </li>
                <li>
                    <a href="">{ { self.sameblock() } }</a>
                    <span>
                        使用特殊的 self 变量并调用与块同名 的函数
                    </span>
                </li>
                <li>
                    <a href="">{ { super() } }</a>
                    <span>
                        调用 super 来渲染父级块的内容
                    </span>
                </li>
                <li>
                    tpl obj<a href=""></a>
                    <span>
                        Flask向Jinja2模板注入了以下全局对象，可以在模板中直接访问<br>
                        * config - 当前Flask应用实例的配置对象<br>
                        * request - 当前HTTP请求对象<br>
                        * session - 当前HTTP请求的会话对象<br>
                        * g - 当前HTTP请求周期内的全局对象<br>
                        * url_for() - URL生成函数 url_for('static', filename='hello.css') <br>
                        * get_flashed_messages() - 闪信函数
                    </span>
                </li>
            </ul>
        </div>
    </div>
</div>