<div class="u-col">
    <div class="u-block">
        <h3>元组<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 自定义元组</h4>
            <ul>
                <li>
                    <a href="">namedtuple</a>(Name,['key'])
                    <span>
                        from collections import namedtuple <br>
                        Point = namedtuple('Point',['x','y'])  <br>
                        nt = Point(1,2) <br>
                        nt.x = 1
                    </span>
                </li>
            </ul>
        </div>
        <h3>列表<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 添加</h4>
            <ul>
                <li>
                    list<a href="">.append</a>(obj)
                    <span>
                        在列表末尾添加新的对象 <br>
                        返回值：None
                    </span>
                </li>
                <li>
                    list<a href="">.insert</a>(index,obj)
                    <span>
                        将对象插入列表 <br>
                        返回值：None
                    </span>
                </li>
                <li>
                    list<a href="">.extend</a>(box)
                    <span>
                        在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表） <br>
                        返回值：None
                    </span>
                </li>
                <li>
                    list<a href="">.copy()</a>
                    <span>
                        复制列表 <br>
                        返回值：复制后的新列表
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 删除</h4>
            <ul>
                <li>
                    list<a href="">.pop</a>(index)
                    <span>
                        移除列表中的一个元素（默认最后一个元素-1） <br>
                        返回值：被移除的元素
                    </span>
                </li>
                <li>
                    list<a href="">.remove</a>(obj)
                    <span>
                        移除列表中某个值的第一个匹配项 <br>
                        返回值：None
                    </span>
                </li>
                <li>
                    list<a href="">.clear()</a>
                    <span>
                        清空列表 <br>
                        返回值：None
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 查找</h4>
            <ul>
                <li>
                    list<a href="">.index</a>(obj)
                    <span>
                        从列表中找出某个值第一个匹配项的索引位置 <br>
                        返回值：索引的位置
                    </span>
                </li>
                <li>
                    list<a href="">.count</a>(obj)
                    <span>
                        统计某个元素在列表中出现的次数 <br>
                        返回值：统计的个数
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 排序</h4>
            <ul>
                <li>
                    list<a href="">.sort</a>([key,t/f])
                    <span>
                        对原列表进行排序 <br>
                        <a href="http://www.runoob.com/python3/python3-att-list-sort.html">更多资料</a> <br>
                        返回值：None
                    </span>
                </li>
                <li>
                    list<a href="">.reverse()</a>
                    <span>
                        反向列表中元素 <br>
                        返回值：None
                    </span>
                </li>
                <li>
                    random.<a href="">shuffle</a>(lst)
                    <span>
                        将序列的所有元素随机排序 <br>
                        返回值：None
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 双端队列</h4>
            <ul>
                <li>
                    <a href="">deque</a>(list)
                    <span>
                        from collections import deque <br>
                        q = deque(['a', 'b', 'c'])
                    </span>
                </li>
                <li>
                    dq<a href="">.append</a>(var)
                    <span>
                        在末尾插入
                    </span>
                </li>
                <li>
                    dq<a href="">.appendleft</a>(var)
                    <span>
                        在首部插入
                    </span>
                </li>
                <li>
                    dq<a href="">.pop</a>()
                    <span>
                        移除末尾项
                    </span>
                </li>
                <li>
                    dq<a href="">.popleft</a>()
                    <span>
                        移除最初项
                    </span>
                </li>
            </ul>
        </div>
        <h3>字典<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 创建</h4>
            <ul>
                <li>
                    <a href="">defaultdict</a>(fn)
                    <span>
                        from collections import defaultdict <br>
                        dd = defaultdict(lambda: 'N/A') <br>
                        dd['key'] # key如果不存在，返回默认值'N/A' <br>
                        注意默认值是调用函数返回的，而函数在创建defaultdict对象时传入。 <br>
                        除了在Key不存在时返回默认值，defaultdict的其他行为跟dict是完全一样的。
                    </span>
                </li>
                <li>
                    <a href="">OrderedDict</a>([(key,val),..])
                    <span>
                        from collections import OrderedDict <br>
                        od = OrderedDict([('a', 1), ('b', 2), ('c', 3)]) <br>
                        OrderedDict的Key会按照插入的顺序排列进行迭代
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 添加</h4>
            <ul>
                <li>
                    dict<a href="">[key]</a>
                    <span>
                        对字典新增/修改新的键值对
                    </span>
                </li>
                <li>
                    dict<a href="">.setdefault</a>(key,[default])
                    <span>
                        如果键存在则返回该键的值，否则添加该key并设置对应的值为default（默认为None）<br>
                        返回值：None
                    </span>
                </li>
                <li>
                    dict1<a href="">.update</a>(dict2)
                    <span>
                        合并字典dict2的键/值对更新到dict1里，如果有冲突的则替换为dict2的值 <br>
                        返回值：None
                    </span>
                </li>
                <li>
                    dict<a href="">.copy()</a>
                    <span>
                        浅复制一个字典，即1级目录进行深拷贝，子对象只引用 <br>
                        直接赋值与copy的区别：<a href="http://www.runoob.com/python3/python3-att-dictionary-copy.html">更多资料</a> <br>
                        返回值：拷贝的字典 
                    </span>
                </li>
                <li>
                    dict<a href="">.fromkeys</a>(box,[default])
                    <span>
                        创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值(默认为None) <br>
                        不会修改dict原先的内容，会重新创建一个新字典，需要赋值到新的变量保存。 <br>
                        返回值：新的字典
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 删除</h4>
            <ul>
                <li>
                    dict<a href="">.pop</a>(key,[default])
                    <span>
                        删除字典给定键key所对应的键值对，key值必须给出。 <br>
                        如果没有 key，返回 default。 <br>
                        返回值：返回值为被删除key的值。
                    </span>
                </li>
                <li>
                    dict<a href="">.popitem()</a>
                    <span>
                        随机返回并删除字典中的一对键和值(一般删除末尾对)。<br>
                        返回值：被删除的键值对元组(key,val)
                    </span>
                </li>
                <li>
                    dict<a href="">.clear()</a>
                    <span>
                        删除字典内所有元素<br>
                        返回值：None
                    </span>
                </li>
                <li>
                    <a href="">del</a> dict[key]
                    <span>
                        删除字典指定的键值对，执行语句，不能赋值
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 查找</h4>
            <ul>
                <li>
                    dict<a href="">.get</a>(key,[default])
                    <span>
                        获取指定键的值，如果值不在字典中返回default值（默认为None） <br>
                        返回值：指定键的值
                    </span>
                </li>
                <li>
                    dict<a href="">.keys()</a>
                    <span>
                        返回一个包含所有key的迭代器，可以使用 list()来转换为列表 <br>
                        返回值：迭代器
                    </span>
                </li>
                <li>
                    dict<a href="">.values()</a>
                    <span>
                        返回一个包含所有value的迭代器，可以使用 list()来转换为列表 <br>
                        返回值：迭代器
                    </span>
                </li>
                <li>
                    dict<a href="">.items()</a>
                    <span>
                        返回一个包含(key,val)元组的迭代器，可以使用list()来转换为列表<br>
                        返回值：迭代器
                    </span>
                </li>
            </ul>
        </div>
        <h3>集合<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 添加</h4>
            <ul>
                <li>
                    set<a href="">.add</a>(obj)
                    <span>
                        将元素添加到集合中，如果元素已存在，则不进行任何操作。 <br>
                        返回值：None
                    </span>
                </li>
                <li>
                    set<a href="">.update</a>(seq)
                    <span>
                        添加一个可迭代对象，参数可以是列表，元组，字典等，当参数为字符串时，会解析为多个单独的字符。 <br>
                        返回值：None
                    </span>
                </li>
                <li>
                    set<a href="">.copy()</a>
                    <span>
                        拷贝一个集合 <br>
                        返回值：拷贝后的集合
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 删除</h4>
            <ul>
                <li>
                    set<a href="">.pop()</a>
                    <span>
                        随机删除集合中的一个元素 <br>
                        返回值：被删除的元素
                    </span>
                </li>
                <li>
                    set<a href="">.remove</a>(obj)
                    <span>
                        将元素从集合中移除，如果元素不存在，则会发生错误 <br>
                        返回值：None
                    </span>
                </li>
                <li>
                    set<a href="">.clear()</a>
                    <span>
                        清空集合 <br>
                        返回值：None
                    </span>
                </li>
                <li>
                    set<a href="">.discard</a>(obj)
                    <span>
                        移除集合中的元素，且如果元素不存在，不会发生错误 <br>
                        返回值：None
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 并集</h4>
            <ul>
                <li>
                    set1<a href=""> | </a> set2
                    <span>
                        返回值：多个集合的并集
                    </span>
                </li>
                <li>
                    set1<a href="">.union</a>(set2)
                    <span>
                        返回值：两个集合的并集
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 差集</h4>
            <ul>
                <li>
                    set1<a href=""> - </a> set2
                    <span>
                        返回值：前者存在而后者不存在的对象集合
                    </span>
                </li>
                <li>
                    set1<a href="">.difference</a>(set2)
                    <span>
                        返回值：前者存在而后者不存在的对象集合
                    </span>
                </li>
                <li>
                    set1<a href="">.difference_update</a>(set2)
                    <span>
                        移除两个集合中都存在的元素，直接修改原集合
                        返回值：None
                    </span>
                </li>
                <li>
                    set1<a href=""> ^ </a> set2
                    <span>
                        返回值：两个集合中不重复的元素集合
                    </span>
                </li>
                <li>
                    set1<a href="">.symmetric_difference</a>(set2)
                    <span>
                        返回值：两个集合中不重复的元素集合。
                    </span>
                </li>
                <li>
                    set<a href="">.symmetric_difference_update</a>(set)
                    <span>
                        移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。 <br>
                        返回值：None
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 交集</h4>
            <ul>
                <li>
                    set1<a href=""> & </a> set2
                    <span>
                        返回值：多个集合的交集
                    </span>
                </li>
                <li>
                    set1<a href="">.intersection</a>(set2,..)
                    <span>
                        返回值：多个集合中都包含的元素，即交集
                    </span>
                </li>
                <li>
                    set1<a href="">.intersection_update</a>(set2,..)
                    <span>
                        只保留交集的元素在原集合中，直接修改原集合 <br>
                        返回值：None
                    </span>
                </li>
                <li>
                    set1<a href="">.isdisjoint</a>(set2)
                    <span>
                        判断两个集合是否包含相同的元素 <br>
                        返回值：True(没有交集) | False(有交集)
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 父集/子集</h4>
            <ul>
                <li>
                    set1<a href="">.issubset</a>(set2)
                    <span>
                        判断集合1是否为集合2的子集。 <br>
                        返回值：True | False
                    </span>
                </li>
                <li>
                    set1<a href="">.issuperset</a>(set2)
                    <span>
                        判断集合1是否为集合2的父集。<br>
                        返回值：True | False
                    </span>
                </li>
            </ul>
        </div>
    </div>
</div>