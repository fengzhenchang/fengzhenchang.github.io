<div class="u-col">
  <div class="u-block">
      <h3>创建<span>-</span></h3>
      <div class="u-list">
      		<h4>[<span>-</span>] 初始化</h4>
            <ul>
                <li>
                    git <a href="">init</a>
                    <span>git init 使用当前目录初始化一个项目</span>
                </li>
                <li>
                    git <a href="">init</a> [path]
                    <span>git init dirname 使用指定目录初始化一个项目</span>
                </li>
                <li>
                    <em>fork</em><a href=""></a>
                    <span>从别人的项目分支一个版本至你的git服务器仓库</span>
                </li>
            </ul>
            <h4>[<span>-</span>] 克隆</h4>
            <ul>
                <li>
                    git <a href="">clone</a> [url]
                    <span>dir缺省时，会创建一个和项目同名的目录 <br>
                    url支持多种数据传输协议，url可以为https:// 、git:// 、git@ 、user@server:path/to/repo.git等。</span>
                </li>
                <li>
                    git <a href="">clone</a> [url] [path]
                    <span>指定dir时生成对应的文件夹名 <br> 
                    path为“./”时则在当前目录下克隆内容，不再生成项目名目录</span>
                </li>
            </ul>
      </div>
      <h3>修改<span>-</span></h3>
      <div class="u-list">
          <h4>[<span>-</span>] 添加/提交</h4>
            <ul>
                <li>
                    git <a href="">add</a> [regexp]
                    <span>
                        跟踪新文件，加入缓存区INDEX<br>
                        git add file1 file2 file3 <br>
                        git add */. <br>
                        git add *.js
                    </span>
                </li>
                <li>
                    git <a href="">commit</a> -m "desc"
                    <span>
                        提交修改，将缓存区内容添加到仓库中<br>
                        git commit -m "message" <br>
                    </span>
                </li>
                <li>
                    git <a href="">commit</a> -a -m "desc"
                    <span>
                        git commit -a -m "message" 跳过使用暂存区域直接提交（但不包含新建文件，仅修改与删除）
                    </span>
                </li>
                <li>
                    git <a href="">commit</a>
                    <span>
                        git commit 这种方式会启动文本编辑器以便输入本次提交的说明。<br>
                        默认会启用 shell 的环境变量 $EDITOR 所指定的软件，一般都是 vim 或 emacs。<br>
                        当然也可以按照 起步 介绍的方式，使用 git config --global core.editor 命令设定你喜欢的编辑软件。<br>
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 删除/移动</h4>
            <ul>
                <li>
                    git <a href="">rm</a> file [--cached][-f]
                    <span>
                    git rm 将文件从缓存区和你的硬盘中(工作目录)删除<br>
                    git rm --cached 只从缓存区中移除，工作目录中保存<br>
                    git rm -f 强制删除，删除之前修改过并且已经放到暂存区域的 <br>
                    </span>
                </li>
                <li>
                    git <a href="">rm</a> -r dir
                    <span>
                        git rm -r dirname 删除目录及目录内容 <br>
                        当该目录没有stage时，无法进行该操作，直接执行shell命令rm操作即可。
                    </span>
                </li>
                <li>
                    git <a href="">mv</a> (from) (to) 
                    <span>
                        同linux mv命令，自动判定执行“移动”或“重命名”操作。<br>
                        git mv 文件名 文件名 : 将源文件名改为目标文件名 <br>
                        git mv 文件名 目录名 : 将文件移动到目标目录 <br>
                        git mv 目录名 目录名 : 目标目录已存在，将源目录移动到目标目录；目标目录不存在则改名（当源文件为空时不可移动） <br>
                        git mv 目录名 文件名 : 出错
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 查看/对比</h4>
            <ul>
                <li>
                    git <a href="">status</a> [-s]
                    <span>检查状态<br>
                        git status -s 简易查看 <br>
                        新添加的未跟踪文件前面有 ?? 标记 <br>
                        新添加到暂存区中的文件前面有 A 标记<br>
                        修改过的文件前面有 M 标记。 <br>
                        出现在右边的 M 表示该文件被修改了但是还没放入暂存区<br>
                        出现在靠左边的 M 表示该文件被修改了并放入了暂存区。<br>
                        AM状态的意思是，这个文件在我们将它添加到缓存之后又有改动
                    </span>
                </li>
                <li>
                    git <a href="">diff</a> [--cached]
                    <span>查看修改<br>
                    git diff : 尚未缓存的改动 <br>
                    git diff --cached : 查看已缓存的改动 (同git diff --staged [1.6+]) <br>
                    git diff HEAD : 查看已缓存的与未缓存的所有改动 <br>
                    git diff --stat : 显示摘要而非整个 diff
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 历史</h4>
            <ul>
                <li>
                    git <a href="">log</a> [--pretty=oneline]
                    <span>
                    git log 显示全部提交记录<br>
                    git log --pretty=oneline 美化显示<br>  
                    </span>
                </li>
                <li>
                    git <a href="">reflog</a>
                    <span>查看每一次命令</span>
                </li>
            </ul>
      </div>
  </div>
</div>