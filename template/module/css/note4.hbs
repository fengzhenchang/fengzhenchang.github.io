<div class="u-col">
	<div class="u-block">
		<h3>布局<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>-</span>] 浮动</h4>
			<ul>
				<li><a href="">float</a><span>
						<a href="http://www.zhangxinxu.com/wordpress/?p=583">浮动详解</a> <a href="http://www.imooc.com/view/121">视频版</a>
						<br>【特性】：
						<br>1.浮动内置设置：设置了float的元素则自动转换display为block.只有块级元素具有宽高等特性.
						<br>2.浮动原理1.环绕特性本质，2.脱离文本流特性
						<br>3.与非浮动元素的margin问题：如果浮动并未被闭合处理，下级非浮动元素默认还是以“环绕”浮动元素，其margin会作用在空的区域，此时应在浮动元素上设置margin
						<br>【浮动闭合与BFC】 <a href="http://www.cnblogs.com/dolphinX/p/3508869.html">参考文档</a>
						<br>1.清除浮动解决方案：
						<br>.clearfix:after {content:"\200B"; display:block; height:0; clear:both; }
						<br>.clearfix:after {content:"";display:table;clear:both;}
						<br>.clearfix { *zoom:1; }
						<br><a href="http://www.w3cfuns.com/article-1287-1.html">完整参考资料</a>
						<br>2.BFC条件：
						<br>float为 left|right
						<br>overflow为 hidden|auto|scroll
						<br>display为 table-cell|table-caption|inline-block
						<br>position为 absolute|fixed
						<br>【IE BUG】
						<br>1:IE6 双倍margin BUG
						<br>对块状容器元素设置了float和与float相同方向的margin值就会出现双倍margin
						<br>解决方法：设置BUG元素：display:inline;
						<br>由于当元素float的时候，display样式的值就会自动转换为“block”,无论display先前设置的属性是什么都会失去效果，不会影响块级特性。
						<br>2.IE6下3像素bug：
						<br>当浮动元素与非浮动元素相邻时,会发生3像素间隙,可设置浮动元素_margin-right:-3px;或使非浮动元素浮动.
						<br><a href="http://pewper.blog.163.com/blog/static/2970860820126261195866/">详细参考资料</a>
						<br>中间列自适应布局方案:左右各浮动（层级需要都在不浮动之前！），需要解决3px bug
						<br>3.IE6-7浮动自适应布局
						<br>IE6-7中浮动创建的自适应布局,需要主动给定父级高度，否则绝对定位的元素无法正常定位。
					</span></li>
				<li><a href="">clear</a><span>清除浮动：none,left,right,both
						<br />清除浮动只影响自己，而不影响其他元素；
						<br />对于CSS的清除浮动(clear)，一定要牢记：这个规则只能影响使用清除的元素本身，不能影响其他元素。
						<br /><a href="http://www.dabaoku.com/jiaocheng/wangye/css/2013040918035.shtml">参考资料1</a>
						<br /><a href="http://www.zhangxinxu.com/wordpress/2014/06/understand-css-clear-left-right-and-use/">参考资料2</a>
					</span></li>
			</ul>
			<h4>[<span>-</span>] 定位</h4>
			<ul>
				<li><a href="">position:static</a><span>对象遵循常规流</span></li>
				<li><a href="">position:relative</a><span>
						相对定位：对象遵循常规流，并且参照自身在常规流中的位置通过top，right，bottom，left属性进行偏移时不影响常规流中的任何元素
						<br>1.相对定位不同于margin-left/top,不会改变原先文档流,html后者层级默认仍然比前者高
						<br>2.相对定位可设置z-index改变层级
					</span></li>
				<li><a href="">position:absolute</a><span>绝对定位：<a href="http://www.imooc.com/learn/192">【参考资料】</a>
						<br />特征：
						<br>1.对象脱离常规流,会在正常文档流之上,也可以通过z-index改为负值在正常流之下
						<br>2.使用top，right，bottom，left等属性进行绝对定位，坐标总是以最近的被定位的父级元素为基准,如没有则以window窗口.
						<br>3.盒子的偏移位置不影响常规流中的任何元素，其margin不与其他任何margin折叠。
						<br>4.当元素设置为绝对定位时,则该元素变为inline-block块级.（不再占据100%）
						<br>特殊用法：
						<br>1.(未定义坐标)：绝对定位的元素，在top，right，bottom，left属性未设置时，会紧随在其前面的兄弟元素之后，但在位置上不影响常规流中的任何元素。如无兄弟元素则贴在父元素起点。<b>即绝对定位在不赋值位置属性时，可作为脱离文档流的相对定位。</b>
						<br />无依赖的绝对定位主要通过margin来实现位移.
						<br />可配合text-align+&nbsp；实现一些自动布局。
						<br />关于跟随性,默认会跟在图片的顶端,由于200B baseline对齐会错位,可通过注释或串联来规避
						<br>2.(未知/已知元素尺寸)：垂直/水平/双向居中,可设置绝对定位,并设置top+bottom:0 / left+right:0 /
						top+left+bottom+right:0,并设置对应方向margin:auto【IE8支持，6-7均不支持】
						<br>3.(已知元素尺寸)：垂直/水平/双向居中,可设置绝对定位,并设置单向距离(left:50% / top:50%),并设置margin-left/top:-尺寸的一半.【IE6支持】
						<br>4.(自适应宽高)：一个绝对定位元素,如未对其宽高进行设置,但对其对向方位值设置时,则认为宽高总是扩展值定位点.可利用作为自适应宽高.【IE8支持，6-7均不支持】
						<br>BUG：
						<br />1.IE6中,父元素区域会管理到内部包含的绝对定位元素范围.
					</span></li>
				<li><a href="">position:fixed</a><span>窗口定位：
						<br>对象脱离常规流，使用top，right，bottom，left等属性以窗口为参考点进行定位，当出现滚动条时，对象不会随着滚动。
						<br>HACK：
						<br>IE6不支持fixed定位，通过CSS表达式解决，<a href="http://www.cnblogs.com/hooray/archive/2011/05/20/2052269.html">完整参考资料</a>
						<br>平板下的fixed有Bug，使用绝对定位代替。
					</span></li>
				<li><a href="">top/bottom/left/right</a>
					<span>配合定位属性进行定位,可为负值. <br>
						值可以为百分比，百分比的值是以自身尺寸为参照。
					</span></li>
				<li><a href="">z-index</a><span>Z轴设定,可以为负值.
						<br>同一个层叠上下文中，层叠级别相同的两个元素，依据它们在HTML文档流中的顺序，写在后面的将会覆盖前面的。
						<br>不同层叠上下文中，元素的显示顺序依据祖先的层叠级别来决定，与自身的层叠级别无关。
						<br>在IE浏览器中，定位元素的z-index层级是相对于各自的父级容器，所以会导致z-index出现错误的表现。解决方法是给其父级元素定义z-index，有些情况下还需要定义position:relative。
						<br><a href="http://css.doyoe.com/properties/positioning/z-index.htm">实例参考</a>
					</span></li>
			</ul>
			<h4>[<span>-</span>] 列表</h4>
			<ul>
				<li>display:<a href="">inline-block</a><span>
						1.IE6-7支持inline元素转换成inline-block，但不支持block元素转换成inline-block，所以非inline元素在IE6,7下要转换成inline-block，需先转换成inline，然后触发hasLayout，以此来获得和inline-block类似的效果；
						<br>解决方案：
						<br>div{display:inline-block;*display:inline;*zoom:1;}
						<br />2.默认inline-block元素之间默认会有间隔,是由于html元素间200B空格导致的(根据上下文字体大小有差异),可以通过连接html元素,或注释,或分行,及其他方式去掉.(浮动亦可,但浮动无法制作横向布局)
						<br /><a href="http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/">详细参考资料</a>
						<br />3.禁止换行还需要设置white-space:nowrap制作横向滚动效果.
					</span></li>
				<li><a href="">ul/li</a>
					<span>
						1.用ul+li打造table效果时,可以自适应宽度换行,边框设置的方式,设置全框,负margin,可规避padding及屏幕尺寸变化问题.<br>
						2.IE6下ul默认表现为block，浮动后依旧占据100%，即使父级浮动，需要自身表现为dbi或fl（设置为dbi如果没有压缩html会出现空格），即用到ul,li来构造布局时，注意给ul,li添加浮动hack。<br>
						3.在ul,li布局时，如非标准结构，在IE67中可能会解析错误导致bug，当非标准结构时建议使用div替代ul,li。<br>
						4.ul表现为dbi在部分原生IE8中可能有渲染bug，添加margin强制渲染占据宽度。
					</span>
				</li>
				<li><a href="">list-style</a><span>[简写] img position type,无序列表ul,有序列表ol,自定义列表dl
						<br>可以用列表来进行布局,清除列表样式ul设置list-style:none,ul{padding:0,margin:0}
						<br>如标记为图片时一般用背景图来替代
					</span></li>
				<li><a href="">list-style-type</a>
					<span>仅作用于具有display值等于list-item的对象（如li对象）,如修改display值后不再显示(设置为块或其他特性均消失标记).
						<br>注意：ol,ul,dl对象的type特性为其后的所有列表项目（如li对象）指明列表属性。
						<br>此样式也可应用于counter计数器样式
						<table>
							<tbody>
								<tr>
									<th>值</th>
									<th>描述</th>
								</tr>
								<tr>
									<td>none</td>
									<td>无标记。</td>
								</tr>
								<tr>
									<td>disc（默认）</td>
									<td>实心圆。</td>
								</tr>
								<tr>
									<td>circle</td>
									<td>空心圆。</td>
								</tr>
								<tr>
									<td>square</td>
									<td>实心方块。</td>
								</tr>
								<tr>
									<td>decimal</td>
									<td>数字。( 1,2,3…… )</td>
								</tr>
								<tr>
									<td>decimal-leading-zero</td>
									<td>0开头的数字标记。( 01,02,03…… )</td>
								</tr>
								<tr>
									<td>lower-roman</td>
									<td>小写罗马数字(i, ii, iii, iv, v, 等。)</td>
								</tr>
								<tr>
									<td>upper-roman</td>
									<td>大写罗马数字(I, II, III, IV, V, 等。)</td>
								</tr>
								<tr>
									<td>lower-alpha</td>
									<td>小写英文字母The marker is lower-alpha (a, b, c, d, e, 等。)</td>
								</tr>
								<tr>
									<td>upper-alpha</td>
									<td>大写英文字母The marker is upper-alpha (A, B, C, D, E, 等。)</td>
								</tr>
								<tr>
									<td>lower-greek</td>
									<td>小写希腊字母(alpha, beta, gamma, 等。)</td>
								</tr>
								<tr>
									<td>lower-latin</td>
									<td>小写拉丁字母(a, b, c, d, e, 等。)</td>
								</tr>
								<tr>
									<td>upper-latin</td>
									<td>大写拉丁字母(A, B, C, D, E, 等。)</td>
								</tr>
								<tr>
									<td>hebrew</td>
									<td>传统的希伯来编号方式</td>
								</tr>
								<tr>
									<td>armenian</td>
									<td>传统的亚美尼亚编号方式</td>
								</tr>
								<tr>
									<td>georgian</td>
									<td>传统的乔治亚编号方式(an, ban, gan, 等。)</td>
								</tr>
								<tr>
									<td>cjk-ideographic</td>
									<td>简单的表意数字</td>
								</tr>
								<tr>
									<td>hiragana</td>
									<td>标记是：a, i, u, e, o, ka, ki, 等。（日文片假名）</td>
								</tr>
								<tr>
									<td>katakana</td>
									<td>标记是：A, I, U, E, O, KA, KI, 等。（日文片假名）</td>
								</tr>
								<tr>
									<td>hiragana-iroha</td>
									<td>标记是：i, ro, ha, ni, ho, he, to, 等。（日文片假名）</td>
								</tr>
								<tr>
									<td>katakana-iroha</td>
									<td>标记是：I, RO, HA, NI, HO, HE, TO, 等。（日文片假名）</td>
								</tr>
							</tbody>
						</table>

					</span></li>
				<li><a href="">list-style-image</a>
					<span>list-style-image:url(img.png)
						<br>定位位置上会有问题.以文字中线开始显示图片.
						<br>并且也只当li依旧为list-item特性时才有效.
						<br>一般使用背景图来制作列表背景.</span></li>
				<li><a href="">list-style-position</a><span>
						<strong>指标记的内外方式,而非(图片)标记坐标位置</strong>
						<br><b>outside</b>：列表项目标记放置在文本以外，且环绕文本不根据标记对齐（默认值）
						<br>1.当type在outside时,如RESET样式中设置ul的padding:0,则会看不到type图标(无论li是否设置padding);如设置ul的padding(例如)小于20,则type图标将会溢出在ul之外.
						<br>2.如设置li的padding-left,则标记位置不更改,而标记与内容之间拉开间距
						<br>3.如设置li的margin-left,则margin继承到标记之外,标记与父级拉开间距
						<hr><b>inside</b>：列表项目标记放置在文本以内，且环绕文本根据标记对齐。<a href="http://css.doyoe.com/properties/list/list-style-position.htm">[查看演示]</a>
						<br>1.当type在inside时,type会和文字一起距离浏览器默认padding缩进,设置padding:0时,则会贴边显示.
						<br>2.设置li的padding-left和margin-left视觉表现都为标记之外与父级拉开间距
					</span></li>
			</ul>
			<h4>[<span>-</span>] 表格</h4>
			<ul>
				<li>display:<a href="">table-cell</a><span>
						特点：
						<br />1.table-cell有类似inline-block的可并行性
						<br />2.表格单元格宽度根据内容扩展，自行设置无效。
						<br />3.表格单元格同行元素总是等高。
						<br />注意：
						<br />1.IE8+有效
						<br />2.设置了display:table-cell的元素对宽度高度敏感，【对margin值无反应】，响应padding属性
						<br />3.display:table-cell与float:left或是position:absolute属性不同时使用
						<br />作用：
						<br />1.可以通过设置vertical-align:middle内容垂直居中
						<br />2.可用于宽度自适应布局，因为单元格本质宽度即由内容宽度决定。注意设置vertical-align:top
						<br />hack处理display:table-cell; width:2000px;*width:auto;*zoom:1;
						<br />3.可用于等高布局，即使不设置高度也会与同行元素等高。
						<br />hack处理display:table-cell; width:30%; margin-bottom:-100px; *padding-bottom:110px;*float:left;
						<br /><a href="http://www.zhangxinxu.com/wordpress/2010/10/%E6%88%91%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8Ddisplaytable-cell%E7%9A%84%E5%BA%94%E7%94%A8/">参考资料</a>
						<br />4.自适应.cell{display:table-cell;*display:inline-block;} //table-cell content + auto side*2
						<br />5.td中让元素垂直居中对齐，是对元素img设置y而非父级 ，文字则设置父级
					</span></li>
				<li>
					<a href="">table</a>
					<span>
						1.表格中插div会脱离表格在外<br />
						2.表格中对合并后 或tr 表现为block,会只有第一个单元格宽度,可直接应用arrow,tr的显示应用table-row而非block<br />
						3.垂直th添加scope="col"
					</span>
				</li>
				<li><a href="">table-layout</a><span>
						适用于：table系元素。
						<br>auto:默认的自动算法。布局将基于各单元格的内容，换言之，可能你给某个单元格定义宽度为100px，但结果可能并不是100px。表格在每一单元格读取计算之后才会显示出来，速度很慢
						<br>fixed：固定布局的算法。在这算法中，水平布局是仅仅基于表格的宽度，表格边框的宽度，单元格间距，列的宽度，而和表格内容无关。也就是说，内容可能被裁切
						<br /><a href="http://www.zhangxinxu.com/wordpress/2014/04/%E8%87%AA%E9%80%82%E5%BA%94%E8%A1%A8%E6%A0%BC-%E5%AD%97%E7%AC%A6%E6%8D%A2%E8%A1%8C-%E6%BA%A2%E5%87%BA%E7%82%B9%E7%82%B9%E7%82%B9-table-text-overflow-ellipsis-word-wrap-break-all/">关于text-overflow在单元格中的失效</a>
					</span></li>
				<li><a href="">border-collapse</a><span>
						separate：边框独立
						<br>collapse：相邻边被合并
						<br>只有当表格边框独立（即border-u-collapse属性等于separate时），border-spacing和empty-cells才起作用。
					</span></li>
				<li><a href="">border-spacing</a><span>
						该属性作用等同于标签属性cellspacing(单元格边距)。border-spacing:0等同于cellspacing="0"
						<br>如果提供全部两个length值时，第一个作用于横向间距，第二个作用于纵向间距。
						<br>如果只提供一个length值时，这个值将作用于横向和纵向上的间距。
						<br>*一般将此值与表格内标签属性cellpadding,cellspacing均设为0,通过CSS边距来控制.
					</span></li>
				<li><a href="">caption-side</a><span>
						top：指定caption在表格上边（默认）
						<br>bottom：指定caption在表格下边
						<br>要在IE7及以下浏览器中实现top与bottom参数值的效果，可直接在caption标签内定义标签属性valign为top和bottom。
					</span></li>
				<li><a href="">empty-cells</a>
					<span>show：指定当表格的单元格无内容时，显示该单元格的边框。（默认）
						<br>hide：指定当表格的单元格无内容时，隐藏该单元格的边框。
						<br>IE7及以下浏览器中默认隐藏无内容的单元格边框，要想使其获得与show参数值相同的效果，可以变相给该空单元格加个占位且不可见的元素，例如全角空格或\&nbsp;等等。
					</span></li>
			</ul>
			<h4>[<span>-</span>] 表单</h4>
			<ul>
				<li>
					form<a href=""></a>
					<span>
						<b>text</b><br>
						1.Chrome、IE、Firefox、Opera各有不同默认的padding和边框。<br>
						2.IE中,不会因为行高而撑开高度<br />
						3.所有浏览器均为content-box计算模式. <br>
						4.IE6-7中,对input设置text-indent会整个缩进,应设为padding<br />
						5.IE6-7中,过高行高字体显示异常,可能只有一半,则单独设置同字号行高与高度,添加专有padding。<br>
						故重置text为：重定义padding,重定义边框样式,同时定义等值高度与行高。
						<hr>
						<b>button</b><br>
						1.Chrome、IE、Firefox、Opera各有不同默认的padding和边框。<br />
						2.所有浏览器中,未定义高度时会受行高撑开高度<br />
						3.Edge与IE8-中,为content-box计算模式,其他浏览器为border-box模式,但指定box-sizing将不会对IE8-生效。<br>
						故重置button为：重定义padding,重定义边框样式,同时修改为content-box模式,可定义等值高度与行高,且设置ie7-的行高为normal。
						<hr>
						<b>select</b><br>
						1.各浏览器边框边距以及option的边距略有不同。<br>
						2.默认所有浏览器均为border-box模式。<br>
						3.仅firefox在未定义高度时会受行高撑开高度<br />
						4.右侧padding在IE中会出现在下拉按钮以外。<br>
						故重置select为：重定义padding,且不设置右侧padding,重定义边框样式,定义高度等于行高+padding+边框。
						<hr>
						<b>radio/checkbox</b><br>
						1.firefox无法修改其尺寸，opera无法修改复选框尺寸。<br>
						2.单复选框的对齐问题,可用vertical-algin解决。<a href="http://www.zhangxinxu.com/wordpress/?p=56">参考资料</a>
					</span>
				</li>
				<li>
					<a href="">:placeholder</a>
					<span>占位提示字符
						<pre><code data-language="css">
                    &:-moz-placeholder
                    &:-ms-input-placeholder
                    &::-webkit-input-placeholder
                    //可定义文字样式：颜色、字号、对齐方式、字体等
                    </code></pre>
					</span>
				</li>
				<li>
					<a href="">input::-ms-clear</a>
					<span>
						设置为display:none，禁止IE10+显示密码切换功能
					</span>
				</li>
				<li>
					<a href="">input::-mas-reveal</a>
					<span>
						设置为display:none，禁止IE10+显示密码切换功能
					</span>
				</li>
				<!-- <li><a href="http://blog.163.com/liyali1855@126/blog/static/36910271201110422617984/">-moz-focus-inner</a><span>火狐表单控件居中</span></li>
                <li><a href="http://www.qianduan.net/search-box-style-custom-webkit.html">-webkit-search</a><span>webkit搜索默认样式</span></li> -->
			</ul>
			<h4>[<span>-</span>] 多列</h4>
			<ul>
				<li><a href="">columns</a>(Npx [M])
					<span>多列,简写时注意加<strong>s</strong>,简写中只含宽度(带单位,不能百分比)和列数.Chrome需要前缀-webkit-
						<br>应用于除table外的非替换块级元素，display:table-cell 元素, 内联块元素。
						<br>实现多列的是里面的内容,而非自身.
						<br>简写方式一：设置width,column:200px 3（固定3列200宽。）
						<br>简写方式二：column:200px （自动根据父级宽度生成X列）
						<br>同时指定2个值时，优先先按列数来分配宽.例如浏览器宽度1800px,指定3列200px宽,结果为分配为3列600px宽,忽略200宽指定值;如果指定宽度200px,未指定列数,则按宽度自动平分为9列
						<br>参考资料：<a href="http://wenku.baidu.com/view/76a20b60011ca300a6c3909d.html">替换/非替换块级/内联元素</a></span></li>
				<li><a href="">column-width</a>(Npx)<span>列宽</span></li>
				<li><a href="">column-count</a>(N)<span>列数</span></li>
				<li><a href="">column-gap</a>(Npx)<span>列间隔</span></li>
				<li><a href="">column-rule</a>(1px solid #ccc)<span>列间隔边框 1px solid #ccc <br>column-rule-style等同于border样式</span></li>
				<li><a href="">column-span</a>(N/all)<span>列横跨,适用于：除浮动和绝对定位之外的块级元素
						<br>是否横跨全部,all和none,不可设置数值非表格,此属性应设置在被应用多列属性的子元素上,多列无继承性,对于不想被继承多列的元素应写在多列父元素之外,而非去设置多列横跨.</span></li>
			</ul>
			<h4>[<span>-</span>] Flex</h4>
			<ul>
				<li>flex<a href=""></a>
					<span>
						display:flex/inline-flex;<br>
						注意：<br>
						1.所有column-*属性在flex容器上都不生效;<br>
						2.flex容器上不能使用::first-line和::first-letter伪元素。<br>
						3.float，clear和vertical-align属性应用在flex项目上将会无效和无法将其out-of-flow。<br>
						<a href="http://demo.agektmr.com/flexbox/">在线调试flexbox布局效果</a>
					</span>
				</li>
				<li>box <a href="">flex-flow</a>
					<span>
						这个属性是flex-direction和flex-wrap属性的简写，默认值：row nowrap。
					</span>
				</li>
				<li>box <a href="">flex-wrap</a>
					<span>nowrap：flex容器为单行。该情况下flex子项可能会溢出容器
						<br>wrap：flex容器为多行。该情况下flex子项溢出的部分会被放置到新行，子项内部会发生断行
						<br>wrap-reverse：反转 wrap 排列。
					</span>
				</li>
				<li>box <a href="">flex-direction</a>
					<span>该属性设置在flex元素上，非flex子项上。
						<br>row：横向从左到右排列（左对齐），默认的排列方式。
						<br>row-reverse：反转横向排列（右对齐），从后往前排，最后一项排在最前面。
						<br>column：纵向排列。
						<br>row-reverse：反转纵向排列，从后往前排，最后一项排在最上面。
						<br>注意：row和row-reverse依赖其写作模式，如果在rtl上下文方式下，他们都将分别被逆转。
					</span>
				</li>
				<li>box <a href="">justify-content</a>
					<span>
						水平方向项目的分布方式。<br>
						flex-start：
						各行向弹性盒容器的起始位置堆叠。弹性盒容器中第一行的侧轴起始边界紧靠住该弹性盒容器的侧轴起始边界，之后的每一行都紧靠住前面一行。<br>
						flex-end：
						各行向弹性盒容器的结束位置堆叠。弹性盒容器中最后一行的侧轴起结束界紧靠住该弹性盒容器的侧轴结束边界，之后的每一行都紧靠住前面一行。<br>
						center：
						各行向弹性盒容器的中间位置堆叠。各行两两紧靠住同时在弹性盒容器中居中对齐，保持弹性盒容器的侧轴起始内容边界和第一行之间的距离与该容器的侧轴结束内容边界与第最后一行之间的距离相等。（如果剩下的空间是负数，则各行会向两个方向溢出的相等距离。）<br>
						space-between：
						各行在弹性盒容器中平均分布。如果剩余的空间是负数或弹性盒容器中只有一行，该值等效于'flex-start'。在其它情况下，第一行的侧轴起始边界紧靠住弹性盒容器的侧轴起始内容边界，最后一行的侧轴结束边界紧靠住弹性盒容器的侧轴结束内容边界，剩余的行则按一定方式在弹性盒窗口中排列，以保持两两之间的空间相等。<br>
						space-around：
						各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。如果剩余的空间是负数或弹性盒容器中只有一行，该值等效于'center'。在其它情况下，各行会按一定方式在弹性盒容器中排列，以保持两两之间的空间相等，同时第一行前面及最后一行后面的空间是其他空间的一半。
					</span>
				</li>
				<li>box <a href="">align-items</a>
					<span>
						垂直方向单行项目的分布方式。<br>
						flex-start：
						弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。<br>
						flex-end：
						弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。<br>
						center：
						弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。<br>
						baseline：
						如弹性盒子元素的行内轴与侧轴为同一条，则该值与'flex-start'等效。其它情况下，该值将参与基线对齐。<br>
						stretch：
						如果指定侧轴大小的属性值为'auto'，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照'min/max-width/height'属性的限制。<b>如果flex子项设置了高度，则按照设置的高度值渲染，而非拉伸。</b>
					</span>
				</li>
				<li>box <a href="">align-content</a><span>
						垂直方向多行项目的分布方式。
					</span></li>
				<li>item <a href="">order</a>
					<span>用整数值来定义排列顺序，数值小的排在前面。可以为负值，默认值0。</span>
				</li>
				<li>item <a href="">flex</a>
					<span>
						这个属性是flex-grow、flex-shrink和flex-basis属性的简写。<br>
						如果缩写「flex: 1」, 则其计算值为「1 1 0%」<br>
						如果缩写「flex: auto」, 则其计算值为「1 1 auto」<br>
						如果「flex: none」, 则其计算值为「0 0 auto」<br>
						如果「flex: 0 auto」或者「flex: initial」, 则其计算值为「0 1 auto」，即「flex」初始值
					</span>
				</li>
				<li>item <a href="">flex-grow</a>
					<span>剩余空间的扩展比例,默认值0。
						<br>flex-grow的默认值为0，如果没有显示定义该属性，是不会拥有分配剩余空间权利的。</span>
				</li>
				<li>item <a href="">flex-shrink</a>
					<span>剩余空间的收缩比例,默认1。
						<br>默认情况之下，所有flex项目都可以收缩，但如果将它们设置为0时，他们不会缩小会保持原来的大小。</span>
				</li>
				<li>item <a href="">flex-basis</a>
					<span>如果所有子元素的基准值之和大于剩余空间，则会根据每项设置的基准值，按比率伸缩剩余空间</span>
				</li>
				<li>item <a href="">align-self</a><span>指定flex项目自身的对齐方式或者使用align-items来指定单个flex项目。
						<br>auto：如果'align-self'的值为'auto'，则其计算值为元素的父元素的'align-items'值，如果其没有父元素，则计算值为'stretch'。
						<br>flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。
						<br>flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。
						<br>center：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。
						<br>baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与'flex-start'等效。其它情况下，该值将参与基线对齐。
						<br>stretch：如果指定侧轴大小的属性值为'auto'，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照'min/max-width/height'属性的限制。
					</span></li>
			</ul>
			<h4>[<span>-</span>] Grid</h4>
			<ul>
				<li>grid<a href=""></a>
					<span>
						display: grid | inline-grid | subgrid;<br>
						注意：<br>
						grid盒子上column,float,clear,vertical-align都没有效果。<br>
						<a href="https://www.layoutit.com/grid">可视化创建grid</a>
					</span>
				</li>
				<li>box <a href="">grid</a>
					<span>
						grid: 200px auto / 1fr auto 1fr; <br>
						水平与垂直二维绘制
					</span>
				</li>
				<li>box <a href="">grid-gap</a>
					<span>
						grid-gap:$grid-row-gap $grid-column-gap;
					</span>
				</li>
				<li>item <a href="">grid-row</a>
					<span>
						grid-row:1 / 2 <br>
						水平起始结束线
					</span>
				</li>
				<li>item <a href="">grid-column</a>
					<span>
						grid-column:1 / 2 <br>
						水平起始结束线
					</span>
				</li>

				<li>box <a href="">grid-template-rows</a>
					<span>
						网格横向划分 <br>
						grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];</span>
				</li>
				<li>box <a href="">grid-template-columns</a>
					<span>
						网格纵向划分 <br>
						grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];
						<br>grid-template-columns: repeat(3, 20px [col-start]) 5%;
						<br>grid-template-columns: 1fr 1fr 1fr;
					</span>
				</li>
				<li>item <a href="">grid-row-start</a>
					<span>
						横向起始位置
					</span>
				</li>
				<li>item <a href="">grid-row-end</a>
					<span>
						横向结束位置
					</span>
				</li>
				<li>item <a href="">grid-column-start</a>
					<span>
						纵向起始位置
					</span>
				</li>
				<li>item <a href="">grid-column-end</a>
					<span>
						纵向结束位置
					</span>
				</li>
				<li>box <a href="">grid-template-areas</a>
					<span>
						定义网格 <br>
						grid-template-areas: "grid-area-name ..."
					</span>
				</li>
				<li>item <a href="">grid-area</a>
					<span>
						定义元件名称
					</span>
				</li>
				<li>box <a href="">grid-row-gap</a>
					<span>
						网格线大小/网格间距<br>
						grid-row-gap: 15px;
					</span>
				</li>
				<li>box <a href="">grid-column-gap</a>
					<span>
						网格线大小/网格间距 <br>
						grid-column-gap: 10px;</span>
				</li>
				<li>box <a href="">grid-auto-rows</a>
					<span>定义隐式自动创建的网格大小<br>
						grid-template-rows: 90px 90px
					</span>
				</li>
				<li>box <a href="">grid-auto-columns</a>
					<span>
						定义隐式自动创建的网格大小<br>
						grid-template-columns: 60px 60px;
					</span>
				</li>
				<li>box <a href="">grid-auto-flow</a>
					<span>定义隐式自动创建的网格填充顺序<br>
						grid-auto-flow: row | column | row dense | column dense
					</span>
				</li>
				<li>box <a href="">justify-items</a>
					<span>
						水平方向网格项内容的对齐方式<br>
						justify-items: start | end | center | stretch;
					</span>
				</li>
				<li>box <a href="">align-items</a>
					<span>
						垂直方向网格项内容的对齐方式<br>
						align-items: start | end | center | stretch;
					</span>
				</li>
				<li>box <a href="">justify-content</a>
					<span>
						水平方向网格的分布方式<br>
						justify-content: start | end | center | stretch | space-around | space-between | space-evenly;
					</span>
				</li>
				<li>box <a href="">align-content</a>
					<span>垂直方向网格的分布方式。<br>
						align-content: start | end | center | stretch | space-around | space-between | space-evenly;
					</span>
				</li>
				<li>item <a href="">justify-self</a>
					<span>
						沿着水平方向网各项内容的对齐方式 <br>
						justify-self:start | end | center | stretch;
					</span>
				</li>
				<li>item <a href="">align-self</a>
					<span>
						沿着垂直方向网各项内容的对齐方式 <br>
						align-self:start | end | center | stretch;
					</span>
				</li>
			</ul>
		</div>
	</div>
</div>