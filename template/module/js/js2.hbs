<!-- 字符串 -->
<div class="u-col">
	<div class="u-block">
		<h3>字符串<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>+</span>]  构建</h4>
			<ul style="display:none;">
				<li>
					<a href="">'str'</a>
					<span>
						字面量方法 <br>
						`\u{xxxxx}` unicode编码
					</span>
				</li>
				<li>
					<a href="">new String()</a>
					<span>
						尽量避免使用包装对象
					</span>
				</li>
				<li>
					<a href="">`__ ${varname} __`</a>
					<span>
					模板字符串，支持多行
					</span>
				</li>
				<li>
					str.<a href="">length</a>
					<span>
						字符串的长度。<br>
						需要特别注意的是，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果。
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>] 转换</h4>
			<ul>
				<li>
					str.<a href="">toUpperCase</a>()
					<span>
						返回值：新字符串 <br>
						原对象：不变 <br>
						转为大写
					</span>
				</li>
				<li>
					str.<a href="">toLowerCase</a>()
					<span>
						返回值：新字符串 <br>
						原对象：不变 <br>
						转为小写 
					</span>
				</li>
				<li>
					<a href="">String.raw</a>(str)
					<span>
						会对斜杠进行转义
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>] 查找</h4>
			<ul>
				<li>
					str.<a href="">indexOf</a>(val,[i])
					<span>
						参数：正向查找指定值,i为起始索引<br>
						返回值：第一个出现的索引位置；如查找不到则返回-1
					</span>
				</li>
				<li>
					str.<a href="">lastIndexOf</a>(val,[i])
					<span>
						参数：逆向查找指定值,i为起始索引 <br>
						返回值：最后一个出现的索引位置；如查找不到则返回-1 
					</span>
				</li>
				<li>
					str.<a href="">includes</a>(str,[i])
					<span>
						返回布尔值，表示是否找到了参数字符串 <br>
						第二个参数，表示开始搜索的位置
					</span>
				</li>
				<li>
					str.<a href="">startsWith</a>(str,[i])
					<span>
						返回布尔值，表示参数字符串是否在原字符串的头部。 <br>
						第二个参数，表示开始搜索的位置
					</span>
				</li>
				<li>
					str.<a href="">endsWidth</a>(str,[i])
					<span>
						返回布尔值，表示参数字符串是否在原字符串的尾部。 <br>
						第二个参数表示针对前n个字符
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>] 匹配</h4>
			<ul>
				<li>
					str.<a href="">split</a>(/reg/,[len])
					<span>
						参数1：字符串或正则表达式 <br>
						参数2：最大的数组长度 <br>
						返回值：数组 <br>
						原对象：不变 <br>
						把字符串按指定符号或正则分割为字符串数组
					</span>
				</li>
				<li>
					str.<a href="">search</a>(/reg/)
					<span>
						参数：字符串/正则表达式<br>
						返回：第一个子串的索引/-1<br>
						始终从头开始找，找到一个即返回，正则无需全局设置
					</span>
				</li>
				<li>
					str.<a href="">match</a>(/reg/g)
					<span>
						参数：字符串/正则表达式<br>
						返回：子串数组/null
						<br>
						如果传入非正则，会隐式地转换为正则表达式；<br>
						如果没有参数，会返回空数组；<br>
						数组： <br>
						1.进行匹配完整的字符串 <br>
						2.圆括号捕获的结果 <br>
						3.index: 0，匹配结果在原字符串中的索引 <br>
						4.input: "原字符串" <br>
						如果没有匹配到，返回null 
					</span>
				</li>
				<li>
					str.<a href="">replace</a><em>(/reg/g,val|fn)</em>
					<span>
						参数1：需要替换的字符或正则表达式，没有全局标识时只替换一次 <br>
						参数2：替换成的字符串或生成字符串的函数，用return返回 <br>
						返回值：新的字符串<br>
						原对象：不变 <hr>
						<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#指定一个函数作为参数">回调函数参数详情</a>
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>] 操作</h4>
			<ul>
				<li>
					str.<a href="">concat</a>(str,..)
					<span>
						参数：串联一个或更多字符串 <br>
						返回值：新的字符串 <br>
						原对象：不变。
					</span>
				</li>
				<li>
					str.<a href="">slice</a>[n,m)
					<span>
						参数：起始位置，末尾位置（不包含）<br>
						返回值：被截取得到的新字符串。<br>
						原对象：不变。<br>
						当只有1个参数时，则为起始位置到末尾全部，且包含末尾元素（即m=arr.length）。<br>
						n和m可为负值，-1 指最后一个元素，-2 指倒数第二个元素。
					</span>
				</li>
				<li>
					str.<a href="">substring</a>[n,m)
					<span>
						参数：起始位置，末尾位置（不包含），不接受负数<br>
						返回值：被截取得到的新字符串。<br>
						原对象：不变。<br>
						<a href="https://www.cnblogs.com/imelemon/p/6035810.html"></a>
					</span>
				</li>
				<li>
					str.<a href="">substr</a>(n,[len])
					<span>
						参数：开始提取字符的位置（如为负数，则用len+n），提取的字符数 <br>
						返回值：新字符串 <br>
						原对象：不变 <br>
						<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substr">参考资料</a>
					</span>
				</li>
				<li>
					str.<a href="">trim</a>()
					<span>
						返回值：新字符串 <br>
						原对象：不变 <br>
						移除字符串的两端删除空白字符。<br>
						空白字符包括所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR）。
					</span>
				</li>
				<li>
					str.<a href="">repeat</a>(n)
					<span>
						参数：重复次数(包含原) <br>
						返回值：新的字符串 <br>
						原对象：不变 <br>
						会向下取整，当为0时变为空字符串
					</span>
				</li>
				<li>
					str.<a href="">charAt</a>(i)
					<span>
						参数：查找的索引位置 <br>
						返回值：索引上的字符
					</span>
				</li>
			</ul>
		</div>
	</div>
	<div class="u-block">
		<h3>文本格式化<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>-</span>] JSON</h4>
			<ul>
				<li>
					<em>json</em><a href=""></a>
					<span>
						概念：<br />
						它是一种表示结构化数据的形式，JSON是一个格式化的字符串，文件格式后缀为.json
						<hr>
						语法：<br />
						简单值：字符串、数值、布尔值、null，不支持undefined<br />
						对象：一组无序的键值对<br />
						数组：一组有序的值的列表，可以通过索引来访问
						<hr>
						JSON与JS的区别：<br />
						1.对象：JSON字符串必须使用双引号（单引号会导致语法错误），且对象的属性必须加双引号；<br />
						2.对象和数组：最后一个属性后不能有逗号 <br>
						3.数值：禁止出现前导零，如果有小数点，则后面至少跟着一位数字 <br>
						<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON">参考资料</a>
					</span>
				</li>
				<li>
					<a href="">JSON.stringify</a><em>(obj,[fn,space])</em>
					<span>
						js对象 -> json字符串 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">参考资料</a><hr>
						参数1：传入的对象。<br>
						如有键值为函数时，会排除该成员。我们可以在转换前将函数用.toString()方法转换为字符串来避免以上问题的发生。<br>
						如有键值为日期对象时，会转为字符串。
						<hr>
						参数2：用于转换结果的函数或数组 <br>
						如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为null或者未提供，则对象所有的属性都会被序列化；</b>
						<hr>
						参数3：缩进空格 <br>
						指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格；如果该参数为字符串(字符串的前十个字母)，该字符串将被作为空格；如果该参数没有提供（或者为null）将没有空格。
					</span>
				</li>
				<li>
					<a href="">JSON.parse</a><em>(json,[fn(key,val)])</em>
					<span>
						json字符串 -> js对象 <br>
						转换函数需返回value值。 <br>
						<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse">参考资料</a>
					</span>
				</li>
				<li>
					obj.<a href="">toJSON</a>()
					<span>
				   		JS对象中添加toJSON()方法，自定义过滤一些数据，返回新的对象 <br>
						注意设置return值
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>] URI</h4>
			<ul>
				<li>
					<a href="">encodeURI</a>(uri)
					<span>
						参数：完整URI字符串 <br>
						返回：新字符串，表示提供的字符串编码为统一资源标识符 <br>
						不会编码：&,+,=
					</span>
				</li>
				<li>
					<a href="">encodeURIComponent</a>(uri)
					<span>
						除了字母、数字、(、)、.、!、~、*、'、-和_之外的所有字符均会被转移
					</span>
				</li>
				<li>
					<a href="">decodeURI</a>(uri)
					<span>解码某个编码的 URI。</span>
				</li>
				<li>
					<a href="">decodeURIComponent</a>(uri)
					<span>解码一个编码的 URI 组件。</span>
				</li>
			</ul>
			<h4>[<span>-</span>] Unicode</h4>
			<ul>
				<li>
					str.<a href="">charCodeAt</a>(i)
					<span>
						参数：查找的索引位置 <br>
						返回值：unicode码点(十进制)
					</span>
				</li>
				<li>
					str.<a href="">codePointAt</a>(i)
					<span>
						参数：查找的索引位置 <br>
						返回值：unicode码点（十进制，需自行转16进制）<br>
						支持大于2个字节的Uniode编码
					</span>
				</li>
				<li>
					<a href="">String.fromCharCode</a>(uni..)
					<span>
						参数：unicode码点 <br>
						返回值：字符串
					</span>
				</li>
				<li>
					<a href="">String.fromCodePoint</a>(uni..)
					<span>
						参数：unicode码点 <br>
						返回值：字符串 <br>
						支持大于2个字节的Uniode编码
					</span>
				</li>
				<li>
					str.<a href="">normalize</a><em>([NFC])</em>
					<span>
						按指定Unicode正规形式将当前字符串正规化。<br>
						参数：四种 Unicode 正规形式 "NFC", "NFD", "NFKC", 以及 "NFKD" 其中的一个, 默认值为 "NFC".<br>
						<a href="http://es6.ruanyifeng.com/#docs/string#normalize">参考资料</a>
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>] 正则表达式</h4>
			<ul>
				<li>
					<a href="">/exp/flags</a>
					<span>
						正则表达式：/exp/flags <br>
						RegExp对象：new RegExp('exp',flags)<br>
						RegExp对象：new RegExp(/exp/flags)<br>
						注意，如果使用第二种写法，因为字符串的转义问题，字符串的两个\\实际上是一个\。<hr>
						<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">参考资料1</a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp">参考资料2</a>
						<hr>
						修饰符：<br>
						i：忽略大小写。 <br>
						g：全局匹配。 <br>
						m：多行模式。<br>
						y：执行“粘性”搜索,匹配从目标字符串的当前位置开始。 <br>
						u：正确处理大于\uFFFF的 Unicode 字符（点.字符在正则表达式中，含义是除了换行符以外的任意单个字符。对于码点大于0xFFFF的 Unicode 字符，点字符不能识别，必须加上u修饰符。）<br>
						s：行终止符
					</span>
				</li>
				<li>
					reg.<a href="">exec</a>(str)
					<span>
						返回：数组/null <br>
						<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec">参考资料</a>
					</span>
				</li>
				<li>
					reg.<a href="">test</a>(str)
					<span>
						返回：true/false
					</span>
				</li>
			</ul>
		</div>
	</div>
</div>