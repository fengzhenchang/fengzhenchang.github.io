<!-- 对象 -->
<div class="u-col">
	<div class="u-block">
		<h3>标准对象<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>-</span>] Promise</h4>
			<ul>
				<li>
					<a href="">new Promise</a><em>(fn(resolve,reject))</em>
					<span>
						<a href="http://es6.ruanyifeng.com/#docs/promise">参考资料</a> <br>
						Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。 <br>
						resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。 <br>
						Promise 新建后就会立即执行。
					</span>
				</li>
				<li>
					pms.<a href="">then</a><em>(fn(val)])</em>
					<span>
						Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。
					</span>
				</li>
				<li>
					pms.<a href="">catch</a><em>(fn(err))</em>
					<span>
						Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。 <br>
						Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个catch语句捕获。<br>
						跟传统的try/catch代码块不同的是，如果没有使用catch方法指定错误处理的回调函数，Promise 对象抛出的错误不会传递到外层代码，即不会有任何反应。
					</span>
				</li>
				<li>
					pms.<a href="">finally</a>(fn)
					<span>
						不管 Promise 对象最后状态如何，都会执行的操作
					</span>
				</li>
				<li>
					<a href="">Promise.all</a>(arr)
					<span>
						const p = Promise.all([p1, p2, p3]); <br>
						用于：多个promise实例全部完成时 <br>
						Promise.all方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。<br>
						只有数组里的promise实例状态都变为fulfilled，p的状态才会变成fulfilled，只要有一个rejected，则p的状态也会变为rejected
					</span>
				</li>
				<li>
					<a href="">Promise.race</a>(arr)
					<span>
						用于：任意promise实例完成时
					</span>
				</li>
				<li>
					<a href="">Promise.resolve</a>(o)
					<span>
						将需要的对象转为promise对象 <br>
						如果为普通对象，将直接改变状态至resolved，且传递参数至then <br>
						如果没有任何参数时，立即resolve的 Promise 对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。
					</span>
				</li>
				<li>
					<a href="">Promise.reject</a>(o)
					<span>
						Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续then方法的第2个函数的参数
					</span>
				</li>
				<li>
					<a href="">Promise.try</a>(o)
					<span>
						<a href="http://es6.ruanyifeng.com/#docs/promise#Promise-try">参考资料</a>
					</span>
				</li>
			</ul>
		</div>
	</div>
</div>