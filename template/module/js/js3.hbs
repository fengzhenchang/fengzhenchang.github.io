<!-- 数组 -->
<div class="u-col">
	<div class="u-block">
		<h3>数组<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>+</span>] 构建</h4>
			<ul style="display:none;">
				<li>
					<a href="">[val,...,]</a>
					<span>
						数组直接量的语法允许有可选的结尾的逗号 <br>
						即[1,2,]长度为2
					</span>
				</li>
				<li>
					<a href="">new Array</a>([len])
					<span>
						var arr = new Array(val1,val2,...) <br>
						var arr = new Array(len)	//长度为len，但并数组内无任何值
					</span>
				</li>
				<li><a href="">Array.of</a>(val..)<span>
					Array.of() 和 Array 构造函数之间的区别在于处理整数参数： <br>
					Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个包含 7 个 undefined 元素的数组。且不需要new运算符。<br>
					<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/of">参考资料</a>
				</span></li>
			</ul>
			<h4>[<span>+</span>] 属性</h4>
			<ul style="display:none;">
				<li>
					arr.<a href="">constructor</a>
					<span>
						返回值：Array
					</span>
				</li>
				<li>
					arr.<a href="">entries()</a>
					<span>
						返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。
					</span>
				</li>
				<li>arr.<a href="">length</a>
					<span>
						返回值：数组的长度（0 到 232-1 的整数）。<br>
						你可以设置 length 属性的值来截断任何数组。当通过改变length属性值来扩展数组时，实际元素的数目将会增加。
					</span>
				</li>
				<li>
					arr<a href="">[index]</a>
					<span>
						返回值：指定索引处数组的值 <br>
						如果是字符串下标，不会体现在数组上，需要指定下标键打印，如果是索引下标，则可以直接打印
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>] 检测</h4>
			<ul>
				<li>
					<a href="">Array.isArray</a>(arr)
					<span>
						返回值：布尔值，是否为数组（ES5）<br>
						<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray">参考资料</a>
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>] 转换</h4>
			<ul>
				<li>
					<a href="">...</a>[argArr]
					<span>
						返回值：参数序列 <br>
						扩展运算符，好比rest参数的逆运算，将一个数组转为用逗号分隔的参数序列，主要用于函数调用 <br>
						如果扩展运算符后面是一个空数组，则不产生任何效果。 <hr>
						ES5写法：fn.apply(null,argArr) <br>
						求最大值：Math.max(...argArr) <br>
						<a href="http://es6.ruanyifeng.com/#docs/array#扩展运算符">参考资料</a>
					</span>
				</li>
				<li><a href="">Array.from</a>(o,[fn],[fthis])<span>
					从一个类似数组或可迭代对象中创建一个新的数组实例。<br>
					参数：包括arguments，set，map，DOM元素集，字符串等 | 回调函数(当前值val)并返回一个新的替换的值 | 回调函数的this指向<br>
					返回：新数组 <br>
					原对象：不变。<br>
					<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from">参考资料1</a> | <a href="http://es6.ruanyifeng.com/#docs/array#Array-from">参考资料2</a>
					<hr>
					Array.from(arrayLike,callback(val),this) <br>
					callback -> return replace_val <hr>
					扩展运算符背后调用的是遍历器接口（Symbol.iterator），如果一个对象没有部署这个接口，就无法转换。Array.from方法还支持类似数组的对象。所谓类似数组的对象，本质特征只有一点，即必须有length属性。因此，任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。如：Array.from({ length: 3 }); <br><br>
					Array.from()的另一个应用是，将字符串转为数组，然后返回字符串的长度。因为它能正确处理各种 Unicode 字符，可以避免 JavaScript 将大于\uFFFF的 Unicode 字符，算作两个字符的 bug。
				</span></li>
				<li>
					arr.<a href="">join</a>(symbol)
					<span>
						使用指定符号把数组元素拼接为字符串<br>
						参数：符号<br>
						返回：新字符串<br>
						原对象：不变。 <hr>
						如果元素是undefined 或者null，则会转化成空字符串 <br>
						如果缺省符号，数组元素用逗号分隔
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>] 查找</h4>
			<ul>
				<li>arr.<a href="">indexOf</a>(val,[i])<span>
					参数：正向查找指定值,i为起始索引 <br>
					返回值：第一个出现的索引位置；如查找不到则返回-1<hr>
					默认起始索引为0，如为-2则从倒数第二个元素开始查找。<br>
					该方法执行严格相等判断
				</span></li>
				<li>arr.<a href="">lastIndexOf</a>(val,[i])<span>
					参数：逆向查找指定值,i为起始索引 <br>
					返回值：第一个出现的索引位置；如查找不到则返回-1 <hr>
					默认起始索引为arr.length - 1，从数组末尾往前开始查找。<br>
					该方法执行严格相等判断
				</span></li>
				<li>arr.<a href="">includes</a>(val,[i])<span>
				 	返回值：true/false <br>
				 	参数：从i索引处开始查找val,默认为 0。<br>
				 	如果i为负值，则按升序从array.length + fromIndex 的索引开始搜索。<br>
				 	指定了i的时候升序查找到末端不会再从头查找。
				</span></li>
				<li>
					arr.<a href="">find</a>(fn,[fthis])
					<span>
						查找数组中满足提供的测试函数的第一个元素的值 <br>
						返回：第一个满足的值 | undefined <hr>
						arr.find(callback(val,i,arr),this) <br>
						callback -> return val <hr>
						<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find">参考资料</a>
					</span>
				</li>
				<li>
					arr.<a href="">findIndex</a>(fn,[fthis])
					<span>
				 		返回符合测试条件的第一个数组元素索引 <br>
						返回：第一个满足的值的索引 | -1 <hr>
						arr.find(callback(val,i,arr),this) <br>
						callback -> return true/false <hr>
						<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex">参考资料</a>
				</span></li>
			</ul>
			<h4>[<span>-</span>] 排序</h4>
			<ul>
				<li>
					arr.<a href="">sort</a>([fn])
					<span>
						对数组进行排序。<br>
						参数：空（如果省略，元素按照转换为的字符串的各个字符的Unicode位点进行排序） | 指定按某种顺序进行排列的函数 <br>
						返回：改变后的数组。<br>
						原对象：改变。<br>
						如果数组包含undefined元素，它们会被排到数组的尾部。
						<hr>
						compareFunction(a,b) <br>
						如return < 0，a排在b之前；<br>
						如return > 0，a排在b之后；<br>
						如return = 0，两个参数相等。
					</span>
				</li>
				<li>
					arr.<a href="">reverse</a>()
					<span>
						反转当前数组排序 <br>
						参数：无 <br>
						返回：改变后的数组 <br>
						原对象：改变
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>] 添加</h4>
			<ul>
				<li>arr.<a href="">push</a>(val...)<span>
					参数：在数组末端添加若干个元素<br>
					返回值：数组的新长度。<br>
					原数组：改变。<hr>
					该方法和 call() 或 apply() 一起使用时，可应用在类似数组的对象上。push 方法根据 length 属性来决定从哪里开始插入给定的值。如果 length 不能被转成一个数值，则插入的元素索引为 0，包括 length 不存在时。当 length 不存在时，将会创建它。<br>
					唯一的原生类数组（array-like）对象是 Strings，尽管如此，它们并不适用该方法，因为字符串是不可改变的。
				</span></li>
				<li>arr.<a href="">unshift</a>(val...)<span>
					参数：在数组最前方添加若干个元素<br>
					返回值：数组的新长度。<br>
					原数组：改变。<hr>
					这个方法能够通过 call 或 apply 方法作用于类似数组的对象上。不过对于没有 length 属性（代表从0开始的一系列连续的数字属性的最后一个）的对象，调用该方法可能没有任何意义。
				</span></li>
				<li>arr.<a href="">splice</a><em>(i,0,val...)</em><span>
					参数：在数组指定的i索引位置添加若干个元素<br>
					返回值：空数组。<br>
					原数组：改变。
				</span></li>
			</ul>
			<h4>[<span>-</span>] 移除</h4>
			<ul>
				<li>arr.<a href="">pop</a>()<span>
					参数：移除数组的最后一个元素，无参数。<br>
					返回值：被删除的元素。<br>
					原数组：改变。<hr>
					该方法和 call() 或 apply() 一起使用时，可应用在类似数组的对象上。pop方法根据 length属性来确定最后一个元素的位置。如果不包含length属性或length属性不能被转成一个数值，会将length置为0，并返回undefined。
				</span></li>
				<li>arr.<a href="">shift</a>()<span>
					参数：移除数组的第一个元素，无参数。<br>
					返回值：被删除的元素。<br>
					原数组：改变。 <hr>
					这个方法能够通过 call 或 apply 方法作用于类似数组的对象上。但是对于没有 length 属性（从0开始的一系列连续的数字属性的最后一个）的对象，调用该方法可能没有任何意义。
				</span></li>
				<li>arr.<a href="">splice</a><em>(i,[delnum])</em><span>
					参数：在数组指定的i索引位置删除指定个数<br>
					返回值：被删除的元素组成的数组。<br>
					原数组：改变。<br>
					delnum=空：如第2个参数缺省，则删除从索引位置起到数组末尾的全部元素。<br>
					delnum=1：如第2个参数存在，且=1，则相当于删除索引位置的元素。<br>
					delnum=n：如第2个参数存在，且>1，删除arr[i]~arr[i+n-1]的元素。
				</span></li>
			</ul>
			<h4>[<span>-</span>] 替换</h4>
			<ul>
				<li>
					arr.<a href="">fill</a>(val,[n,m))
					<span>
						参数：用一个固定值替换数组的元素。<br>
						返回值：新的数组。<br>
						原数组：改变。<br>
						包含n位置，不包含m位置。默认值n=0,m=length
					</span>
				</li>
				<li>arr.<a href="">copyWithin</a>(i,[n,m))<span>
					参数：复制（索引n ~ 索引m-1）的元素，替换（索引i ~ 索引i+m-n-1）的元素。<br>
					返回值：新的数组。<br>
					原数组：改变。<br>
					复制选取的部分包含n，但不包含m。如果m不定义，即到数组末端。 <hr>
					i 为基底的索引，复制序列到该位置。如果是负数，target 将从末尾开始计算 <br>
					如果 n 被忽略，copyWithin 将会从0开始复制。 <br>
					如果 m 被忽略，copyWithin 将会复制到 arr.length。<br>
					<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin">参考资料</a>
				</span></li>
				<li>arr.<a href="">splice</a><em>(i,[delnum],val...)</em><span>
					参数：在数组指定的i索引位置删除和添加若干个元素（用新的替换旧的）<br>
					返回值：被删除的元素组成的数组。<br>
					原数组：改变。<br>
					delnum=空：如第2个参数缺省，则删除从索引位置起到数组末尾的全部元素。<br>
					delnum=1：如第2个参数存在，且=1，则相当于删除索引位置的元素。<br>
					delnum=n：如第2个参数存在，且>1，删除arr[i]~arr[i+n-1]的元素。
				</span></li>
			</ul>
			<h4>[<span>-</span>] 操作</h4>
			<ul>
				<li>arr.<a href="">concat</a>(val...)<span>
					参数：串联一个新的数组元素或数组内的元素（当串联的是一个新数组时，只取数组里的值）。<br>
					返回：一个新的数组。<br>
					原数组：不变。
				</span></li>
				<li>arr.<a href="">slice</a>[n,m)<span>
					参数：起始位置，末尾位置（不包含）<br>
					返回值：被截取得到的新数组。<br>
					原数组：不变。<br>
					当只有1个参数时，则为起始位置到末尾全部，且包含末尾元素（即m=arr.length）。<br>
					n和m可为负值，-1 指最后一个元素，-2 指倒数第二个元素。
				</span></li>
			</ul>
			<h4>[<span>-</span>] 遍历</h4>
			<ul>
				<li>
					arr.<a href="">forEach</a><em>(fn(val,i),[fthis])</em>
					<span>
						对数组的每个元素执行一次提供的函数 <br>
						返回值：无 <br>
						原数组：不变<br>
						回调返回：无 <br>
						必定会每个均遍历一次，无法用continue或break退出 <hr>
						<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">参考资料</a> <br>
						如果使用箭头函数表达式传入函数参数，thisArg 参数会被忽略，因为箭头函数在词法上绑定了this值。 <br>
						如果数组在迭代时被修改了，则其他元素会被跳过
					</span>
				</li>
				<li>
					arr.<a href="">map</a><em>(fn(val,i),[fthis])</em>
					<span>
						创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果 <br>
						返回值：新数组 <br>
						原数组：不变<br>
						回调返回：新值 <br>
						传入的是函数名或匿名函数，不是一个执行的函数。 <br>
						callback需返回一个新val，注意不能直接用parseInt方法，具体见参考资料
						<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map">参考资料</a>
					</span>
				</li>
				<li>
					arr.<a href="">filter</a><em>(fn(val,i),[fthis])</em>
					<span>			
						检测数值元素，并返回符合条件所有元素的数组。<br>
						返回值：新数组 <br>
						原数组：不变<br>
						回调返回：true/false <br>
						和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素。<br>
						<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">参考资料</a>
					</span></li>
				
				<li>
					arr.<a href="">every</a><em>(fn(val,i),[fthis])</em>
					<span>
						测试数组的所有元素是否都通过了指定函数的测试 <br>
						返回值：true/false <br>
						原数组：不变 <br>
						回调返回：true/false <hr>
						回调中请指定所有返回的true/false情况
					</span></li>
				<li>
					arr.<a href="">some</a><em>(fn(val,i),[fthis])</em>
					<span>
						测试数组中的某些元素是否通过由提供的函数实现的测试 <br>
						返回值：true/false <br>
						原数组：不变 <br>
						回调返回：true/false <hr>
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>] 递归</h4>
			<ul>
				<li>
					arr.<a href="">reduce</a><em>(fn(total,val,i),[init])</em>
					<span>
						将数组中的元素通过回调函数累计处理 <br>
						返回值：最终累计处理结果 <br>
						原数组：不变 <br>
						回调返回：新的total值（total与val的规则）<hr>
						total:累加器累加回调的返回值; 它是上一次调用回调时返回的累积值，或初始值 <br>
						val:当前正在处理的元素 <br>
						i:当前处理元素的索引号；如果提供了初始值，索引号为0开始，否则索引为1开始 <br>
						init:用作第一个调用callback的第一个参数的值。如果没有提供初始值，则将使用数组中的第一个元素。在没有初始值的空数组上调用 reduce 将报错。
					</span>
				</li>
				<li>
					arr.<a href="">reduceRight</a><em>(fn(total,val,i),[init])</em>
					<span>
						从右向左递归。
					</span>
				</li>
			</ul>
		</div>
		<h3>索引集合类<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>-</span>] 类数组对象</h4>
			<ul>
				<li>
					<a href="">arguments</a>
					<span>
						函数内部的arguments对象 <br>
						不能直接使用数组原型方法，但是可以用call实现
					</span>
				</li>
				<li>
					<a href="">NodeList</a>
					<span>
						dom遍历方法返回的节点列表
					</span>
				</li>
			</ul>
		</div>
	</div>
</div>