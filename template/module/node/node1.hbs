<!-- 系统、进程 -->
<div class="u-col">
    <div class="u-block">
        <h3>path<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 路径信息</h4>
            <ul>
                <li>
                    path.<a href="">dirname</a>(path)
                    <span>
                        返回路径中代表文件夹的部分，同 Unix 的dirname 命令类似。 <br>
                        不要以\\结尾，总是返回上一级目录
                    </span>
                </li>
                <li>
                    path.<a href="">basename</a>(path,[ext])
                    <span>
                        返回路径中的最后一部分。同 Unix 命令 bashname 类似。 <br>
                        ext:可选的文件扩展名，使用了时，返回的数据不带扩展名
                    </span>
                </li>
                <li>
                    path.<a href="">extname</a>(path)
                    <span>
                        返回路径中文件的后缀名，即路径中最后一个'.'之后的部分。 <br>
                        如果一个路径中并不包含'.'或该路径只包含一个'.' 且这个'.'为路径的第一个字符，则此命令返回空字符串。
                    </span>
                </li>
                <li>
                    path.<a href="">parse</a>(path)
                    <span>
                        返回路径字符串的对象 <br>
                        root:根目录,dir:目录,base:文件名,name:文件名称,ext:扩展名
                    </span>
                </li>
                <li>
                    path.<a href="">format</a>(obj)
                    <span>
                        从对象中返回路径字符串，和 path.parse 相反。
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 路径操作</h4>
            <ul>
                <li>
                    path.<a href="">relative</a>(from,to)
                    <span>
                        返回从 from 到 to 的相对路径（基于当前工作目录）
                    </span>
                </li>
                <li>
                    path.<a href="">resolve</a>([...paths])
                    <span>
                        会返回当前工作目录的绝对路径
                    </span>
                </li>
                <li>
                    path.<a href="">isAbsolute</a>(path)
                    <span>
                        判断参数 path 是否是绝对路径
                    </span>
                </li>
                <li>
                    path.<a href="">join</a>([...paths])
                    <span>
                        用于连接路径。 <br>
                        该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是"/"，Windows系统是"\"。 <br>
                        当出现..自动跳至上一级目录
                    </span>
                </li>
                <li>
                    path.<a href="">normalize</a>(path)
                    <span>
                        规范化路径
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 平台特性</h4>
            <ul style="display:none;">
                <li>
                    path.<a href="">sep</a>
                    <span>
                        平台的文件路径分隔符，'\\' 或 '/'
                    </span>
                </li>
                <li>
                    path.<a href="">delimiter</a>
                    <span>
                        平台特定的路径分隔符 <br>
                        windows为;  posix为:
                    </span>
                </li>
                <li>
                    path.<a href="">posix</a>
                    <span>
                        提供了 path 方法针对 POSIX 的实现
                    </span>
                </li>
                <li>
                    path.<a href="">win32</a>
                    <span>
                        提供上述 path 的方法，不过总是以 win32 兼容的方式交互
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>process<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>+</span>] 事件</h4>
            <ul style="display:none">
                <li>
                    [evt]<a href="">exit</a>(exitCode)
                    <span>
                        显式调用process.exit()方法，使得Node.js进程即将结束； <br>
                        Node.js事件循环数组中不再有额外的工作，使得Node.js进程即将结束 <hr>
                        'exit'事件监听器的回调函数，只有一个入参，这个参数的值可以是process.exitCode的属性值，或者是调用process.exit()方法时传入的exitCode值。 <hr>
                        'exit'事件监听器的回调函数，只允许包含同步操作。所有监听器的回调函数被调用后，任何在事件循环数组中排队的工作都会被强制丢弃，然后Nodje.js进程会立即结束。 例如回调中的timeout操作永远不会被执行(因为不是同步操作)。 <hr>
                        <a href="http://www.runoob.com/nodejs/nodejs-global-object.html">退出状态码参考资料</a>
                    </span>
                </li>
                <li>
                    [evt]<a href="">beforeExit</a>(exitCode)
                    <span>
                        当Node.js的事件循环数组已经为空，并且没有额外的工作被添加进来，事件'beforeExit'会被触发。 <br>
                        process.exitCode 作为唯一的参数值传递给'beforeExit'事件监听器的回调函数。  <hr>
                        正常情况下，如果没有额外的工作被添加到事件循环数组，Node.js进程会结束。但是如果'beforeExit'事件绑定的监听器的回调函数中，含有一个可以进行异步调用的操作，那么Node.js进程会继续运行。 <br>
                        如果进程由于显式的原因而将要终止，例如直接调用process.exit()或抛出未捕获的异常，'beforeExit'事件不会被触发。
                    </span>
                </li>
                <li>
                    [evt]<a href="">uncaughtException</a>(err)
                    <span>
                        如果Javascript未捕获的异常，沿着代码调用路径反向传递回event loop，会触发'uncaughtException'事件。 Node.js默认情况下会将这些异常堆栈打印到stderr 然后进程退出。 为'uncaughtException'事件增加监听器会覆盖上述默认行为。
                    </span>
                </li>
                <li>
                    [evt]<a href="">Signal Events</a>
                    <span>
                        当进程接收到信号时就触发。信号列表详见标准的 POSIX 信号名，如 SIGINT、SIGUSR1 等。 <br>
                        <a href="http://man7.org/linux/man-pages/man7/signal.7.html">参考资料</a>
                    </span>
                </li>
                <li>
                    [evt]<a href="">disconnect</a>
                    <span>
                        如果Node.js进程是由IPC channel的方式创建的，当IPC channel关闭时，会触发'disconnect'事件。
                    </span>
                </li>
                <li>
                    [evt]<a href="">message</a>(msg,sendHanle)
                    <span>
                        如果Node.js进程是由IPC channel的方式创建的，当子进程收到父进程的的消息时(消息通过childprocess.send()发送）， 会触发'message'事件。 <hr>
                        'message'事件监听器的回调函数中被传递的参数如下： <br>
                        message - 解析的JSON对象，或primitive值。 <br>
                        sendHandle - 一个net.Socket 或 net.Server对象，或undefined。
                    </span>
                </li>
                <li>
                    [evt]<a href="">rejectionHandled</a>
                    <span>
                        如果有Promise被rejected，并且此Promise在Nodje.js事件循环的下次轮询及之后期间，被绑定了一个错误处理器[例如使用promise.catch()][])， 会触发'rejectionHandled'事件。 <hr>
                        <a href="http://nodejs.cn/api/process.html#process_event_rejectionhandled">参考资料</a>
                    </span>
                </li>
                <li>
                    [evt]<a href="">unhandledRejection</a>
                    <span>
                        <a href="http://nodejs.cn/api/process.html#process_event_unhandledrejection">参考资料</a>
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 基本属性</h4>
            <ul>
                <li>
                    process.<a href="">stdout</a>
                    <span>
                        标准输出流
                    </span>
                </li>
                <li>
                    process.<a href="">stderr</a>
                    <span>
                        标准错误流
                    </span>
                </li>
                <li>
                    process.<a href="">stdin</a>
                    <span>
                        标准输入流
                    </span>
                </li>
                <li>
                    process.<a href="">exitCode</a>
                    <span>
                        进程退出时的代码，如果进程优通过 process.exit() 退出，不需要指定退出码。
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 常用方法</h4>
            <ul>
                <li>
                    process.<a href="">cwd()</a>
                    <span>
                        返回当前进程的工作目录
                    </span>
                </li>
                <li>
                    process.<a href="">chdir</a>(dir)
                    <span>
                        改变当前工作进程的目录，如果操作失败抛出异常。
                    </span>
                </li>
                <li>
                    process.<a href="">nextTick</a>(callback,[args])
                    <span>
                        一旦当前事件循环结束，调用回到函数
                    </span>
                </li>
                <li>
                    process.<a href="">abort()</a>
                    <span>
                        这将导致 node 触发 abort 事件。会让 node 退出并生成一个核心文件。 
                    </span>
                </li>
                <li>
                    process.<a href="">exit</a>([code])
                    <span>
                        使用指定的 code 结束进程。如果忽略，将会使用 code 0。
                    </span>
                </li>
                <li>
                    process.<a href="">kill</a>(pid,[signal])
                    <span>
                        发送信号给进程. pid 是进程id，并且 signal 是发送的信号的字符串描述。信号名是字符串，比如 'SIGINT' 或 'SIGHUP'。如果忽略，信号会是 'SIGTERM'。
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 进程环境</h4>
            <ul>
                <li>
                    process.<a href="">argv</a>
                    <span>
                        argv 属性返回一个数组，由命令行执行脚本时的各个参数组成。 <br> 
                        它的第一个成员总是node，第二个成员是脚本文件名，其余成员是脚本文件的参数。
                    </span>
                </li>
                <li>
                    process.<a href="">argv0</a>
                    <span>
                        v6.4+ <br>
                        保存Node.js启动时传入的argv[0]参数值的一份只读副本
                    </span>
                </li>
                <li>
                    process.<a href="">execPath</a>
                    <span>
                        返回执行当前脚本的 Node 二进制文件的绝对路径
                    </span>
                </li>
                <li>
                    process.<a href="">execArgv</a>
                    <span>
                        返回一个数组，成员是命令行下执行脚本时，在Node可执行文件与脚本文件之间的命令行参数。
                    </span>
                </li>
                <li>
                    process.<a href="">env</a>
                    <span>
                        返回一个对象，成员为当前 shell 的环境变量
                    </span>
                </li>
                <li>
                    process.<a href="">version</a>
                    <span>
                        Node 的版本
                    </span>
                </li>
                <li>
                    process.<a href="">versions</a>
                    <span>
                        一个属性，包含了 node 的版本和依赖.
                    </span>
                </li>
                <li>
                    process.<a href="">config</a>
                    <span>
                        一个包含用来编译当前 node 执行文件的 javascript 配置选项的对象。它与运行 ./configure 脚本生成的 "config.gypi" 文件相同。
                    </span>
                </li>
                <li>
                    process.<a href="">pid</a>
                    <span>
                        当前进程的进程号
                    </span>
                </li>
                <li>
                    process.<a href="">title</a>
                    <span>
                        进程名
                    </span>
                </li>
                <li>
                    process.<a href="">arch</a>
                    <span>
                        当前 CPU 的架构：'arm'、'ia32' 或者 'x64'。
                    </span>
                </li>
                <li>
                    process.<a href="">platform</a>
                    <span>
                        运行程序所在的平台系统 'darwin', 'freebsd', 'linux', 'sunos' 或 'win32'
                    </span>
                </li>
                <li>
                    process.<a href="">mainModule</a>
                    <span>
                        require.main 的备选方法。不同点，如果主模块在运行时改变，require.main可能会继续返回老的模块。可以认为，这两者引用了同一个模块。
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 关联控制</h4>
            <ul style="display:none">
                <li>
                    process.<a href="">umask</a>([mask])
                    <span>
                        设置或读取进程文件的掩码。子进程从父进程继承掩码。如果mask 参数有效，返回旧的掩码。否则，返回当前掩码。
                    </span>
                </li>
                <li>
                    process.<a href="">channel</a>
                    <span>
                        如果Node.js进程是由IPC channel方式创建的，process.channel属性保存IPC channel的引用。 如果IPC channel不存在，此属性值为`undefined。
                    </span>
                </li>
                <li>
                    process.<a href="">connected</a>
                    <span>
                        如果Node.js进程是由IPC channel方式创建的， 只要IPC channel保持连接，process.connected属性就会返回true。 process.disconnect()被调用后，此属性会返回false。 <br>
                        process.connected如果为false，则不能通过IPC channel使用process.send()发送信息。
                    </span>
                </li>
                <li>
                    process.<a href="">disconnect()</a>
                    <span>
                        关闭到父进程的IPC频道，以允许子进程一旦没有其他链接来保持活跃就优雅地关闭。
                    </span>
                </li>
                <li>
                    process.<a href="">send</a>(msg,{},fn)
                    <span>
                        给父进程发送消息
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 性能相关</h4>
            <ul style="display:none">
                <li>
                    process.<a href="">memoryUsage()</a>
                    <span>
                        返回一个对象，描述了 Node 进程所用的内存状况，单位为字节。
                    </span>
                </li>
                <li>
                    process.<a href="">cpuUsage</a>([previousValue])
                    <span>
                        v6.1+ <br>
                        返回包含当前进程的用户CPU时间和系统CPU时间的对象
                    </span>
                </li>
                <li>
                    process.<a href="">uptime()</a>
                    <span>
                        返回 Node 已经运行的秒数
                    </span>
                </li>
                <li>
                    process.<a href="">hrtime()</a>
                    <span>
                        返回当前进程的高分辨时间，形式为 [seconds, nanoseconds]数组。它是相对于过去的任意事件。该值与日期无关，因此不受时钟漂移的影响。主要用途是可以通过精确的时间间隔，来衡量程序的性能。你可以将之前的结果传递给当前的 process.hrtime() ，会返回两者间的时间差，用来基准和测量时间间隔。
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] POSIX权限</h4>
            <ul style="display:none">
                <li>
                    process.<a href="">getgid()</a>
                    <span>
                        获取进程的群组标识。获取到得时群组的数字 id，而不是名字。 <br>
                        注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
                    </span>
                </li>
                <li>
                    process.<a href="">setgid</a>(id)
                    <span>
                        设置进程的群组标识.可以接收数字 ID 或者群组名。如果指定了群组名，会阻塞等待解析为数字 ID 。<br>
                        注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
                    </span>
                </li>
                <li>
                    process.<a href="">getuid()</a>
                    <span>
                        获取进程的用户标识。这是数字的用户 id，不是用户名。<br>
                        注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
                    </span>
                </li>
                <li>
                    process.<a href="">setuid</a>(id)
                    <span>
                        设置进程的用户标识。接收数字 ID或字符串名字。果指定了群组名，会阻塞等待解析为数字 ID 。<br>
                        注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
                    </span>
                </li>
                <li>
                    process.<a href="">getgroups()</a>
                    <span>
                        返回进程的群组 iD 数组。POSIX 系统没有保证一定有，但是 node.js 保证有。<br>
                        注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
                    </span>
                </li>
                <li>
                    process.<a href="">setgroups</a>(groups)
                    <span>
                        设置进程的群组 ID。这是授权操作，所有你需要有 root 权限，或者有 CAP_SETGID 能力。<br>
                        注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
                    </span>
                </li>
                <li>
                    process.<a href="">initgroups</a>(user,extra_group)
                    <span>
                        读取 /etc/group ，并初始化群组访问列表，使用成员所在的所有群组。这是授权操作，所有你需要有 root 权限，或者有 CAP_SETGID 能力。<br>
                        注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>child_process<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 创建</h4>
            <ul>
                <li>
                    ipc.<a href="">spawn</a><em>(cmd,[args],[opt])</em>
                    <span>
                        通过当前命令启动一个新的进程 <hr>
                        cmd - str,要运行的命令行 <br>
                        args - arr,字符串参数列表 <br>
                        opt - obj,设置 <a href="http://nodejs.cn/api/child_process.html#child_process_child_process_spawn_command_args_options">参考资料</a>
                    </span>
                </li>
                <li>
                    ipc.<a href="">fork</a><em>(modulePath,[arg],[opt])</em>
                    <span>
                        child_process.fork() 方法是 child_process.spawn() 的一个特殊情况，专门用于衍生新的 Node.js 进程。 跟 child_process.spawn() 一样返回一个 ChildProcess 对象。 返回的 ChildProcess 会有一个额外的内置的通信通道，它允许消息在父进程和子进程之间来回传递。
                        <a href="http://nodejs.cn/api/child_process.html#child_process_child_process_fork_modulepath_args_options">参考资料</a>
                    </span>
                </li>
                <li>
                    ipc.<a href="">exec</a><em>(cmd,[opt],[fn])</em>
                    <span>
                        在shell中运行一个命令，并缓存其输出 <a href="http://nodejs.cn/api/child_process.html#child_process_child_process_exec_command_options_callback">参考资料</a>
                    </span>
                </li>
                <li>
                    ipc.<a href="">execFile</a><em>(file,[arg],[opt],[fn])</em>
                    <span>
                        指定的可执行的 file 被直接衍生为一个新进程 <a href="http://nodejs.cn/api/child_process.html#child_process_child_process_execfile_file_args_options_callback">参考资料</a>
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 事件</h4>
            <ul style="display:none;">
                <li>
                    [evt]<a href="">close</a>
                    <span>
                        当子进程的 stdio 流被关闭时会触发 'close' 事件。 这与 'exit' 事件不同，因为多个进程可能共享同一 stdio 流。
                    </span>
                </li>
                <li>
                    [evt]<a href="">disconnect</a>
                    <span>
                        在父进程中调用 subprocess.disconnect() 或在子进程中调用 process.disconnect() 后会触发 'disconnect' 事件。 断开后就不能再发送或接收信息，且 subprocess.connected 属性会被设为 false。
                    </span>
                </li>
                <li>
                    [evt]<a href="">error</a>
                    <span>
                        每当出现以下情况时触发 'error' 事件： <br>
                        1.进程无法被衍生；<br>
                        2.进程无法被杀死；<br>
                        3.向子进程发送信息失败。<br>
                        注意，在错误发生后，'exit' 事件可能会也可能不会触发。 当同时监听了 'exit' 和 'error' 事件，谨防处理函数被多次调用。
                    </span>
                </li>
                <li>
                    [evt]<a href="">exit</a>
                    <span>
                        子进程结束后会触发 'exit' 事件。 如果进程退出了，则 code 是进程的最终退出码，否则为 null。 如果进程是收到的信号而终止的，则 signal 是信号的字符串名称，否则为 null。 这两个总有一个是非空的。 <br>注意，当 'exit' 事件被触发时，子进程的 stdio 流可能依然是打开的。
                    </span>
                </li>
                <li>
                    [evt]<a href="">message</a>
                    <span>
                        当一个子进程使用 process.send() 发送消息时会触发 'message' 事件。
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 子进程</h4>
            <ul style="display:none;">
                <li>
                    subp.<a href="">channel</a>
                    <span>
                        当前子进程的 IPC 通道的引用。如果当前没有 IPC 通道，则该属性为 undefined。
                    </span>
                </li>
                <li>
                    subp.<a href="">connected</a>
                    <span>
                        表明是否仍可以从一个子进程发送和接收消息。 当 subprocess.connected 为 false 时，则不能再发送或接收的消息。
                    </span>
                </li>
                <li>
                    subp.<a href="">disconnect()</a>
                    <span>
                        关闭父进程与子进程之间的 IPC 通道，一旦没有其他的连接使其保持活跃，则允许子进程正常退出。 调用该方法后，父进程和子进程上各自的 subprocess.connected 和 subprocess.connected 属性都会被设为 false，且进程之间不能再传递消息。
                    </span>
                </li>
                <li>
                    subp.<a href="">kill</a>([signal])
                    <span>
                        向子进程发送一个信号。 如果没有给定参数，则进程会发送 'SIGTERM' 信号。
                    </span>
                </li>
                <li>
                    subp.<a href="">killed</a>
                    <span>
                        表明该子进程是否已成功接收到 subprocess.kill() 的信号。 该属性不代表子进程是否已被终止。
                    </span>
                </li>
                <li>
                    subp.<a href="">pid</a>
                    <span>
                        返回子进程的进程标识（PID）
                    </span>
                </li>
                <li>
                    subp.<a href="">send</a>(msg,[handle],[opt],[fn])
                    <span>
                        发送消息到子进程
                    </span>
                </li>
                <li>
                    subp.<a href="">stderr</a>
                    <span>
                        一个代表子进程的 stderr 的可读流。
                    </span>
                </li>
                <li>
                    subp.<a href="">stdin</a>
                    <span>
                        一个代表子进程的 stdin 的可写流。
                    </span>
                </li>
                <li>
                    subp.<a href="">stdio</a>
                    <span>
                        一个到子进程的管道的稀疏数组
                    </span>
                </li>
                <li>
                    subp.<a href="">stdout</a>
                    <span>
                        一个代表子进程的 stdout 的可读流
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>os<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 特征</h4>
            <ul>
                <li>
                    os.<a href="">hostname()</a>
                    <span>
                        返回操作系统的主机名
                    </span>
                </li>
                <li>
                    os.<a href="">release()</a>
                    <span>
                        返回操作系统的发行版本
                    </span>
                </li>
                <li>
                    os.<a href="">platform()</a>
                    <span>
                        返回操作系统平台. <br>
                        可能的值'aix','darwin','freebsd','linux','openbsd','sunos','win32'
                    </span>
                </li>
                <li>
                    os.<a href="">arch()</a>
                    <span>
                        返回操作系统 CPU 架构 <br>
                        可能的值'arm', 'arm64', 'ia32', 'mips', 'mipsel', 'ppc', 'ppc64', 's390', 's390x', 'x32', 'x64', 和 'x86'
                    </span>
                </li>
                <li>
                    os.<a href="">type()</a>
                    <span>
                        返回操作系统类型. <br>
                        <table>
                            <tr>
                                <th>系统</th>
                                <th>返回值</th>
                            </tr>
                            <tr>
                                <td>linux</td>
                                <td>'Linux'</td>
                            </tr>
                            <tr>
                                <td>macOS</td>
                                <td>'Darwin'</td>
                            </tr>
                            <tr>
                                <td>Windows</td>
                                <td>'Windows_NT'</td>
                            </tr>
                        </table>
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 性能</h4>
            <ul style="display:none;">
                <li>
                    os.<a href="">uptime()</a>
                    <span>
                        返回操作系统运行的时间，以秒为单位。
                    </span>
                </li>
                <li>
                    os.<a href="">loadavg()</a>
                    <span>
                        返回一个包含 1、5、15 分钟平均负载的数组。 <br>
                        平均负载是系统活动的测量,由操作系统计算得出,表达为一个分数. 一般来说,平均负载应该理想地比系统的逻辑CPU的数目要少. 平均负载是UNIX相关的概念,在Windows平台上没有对应的概念. 在Windows上,其返回值总是[0, 0, 0].
                    </span> 
                </li>
                <li>
                    os.<a href="">totalmen()</a>
                    <span>
                        返回系统内存总量，单位为字节。
                    </span>
                </li>
                <li>
                    os.<a href="">freemem()</a>
                    <span>
                        返回操作系统空闲内存量，单位是字节。
                    </span>
                </li>
                <li>
                    os.<a href="">cpus()</a>
                    <span>
                        返回一个对象数组，包含所安装的每个 CPU/内核的信息：型号、速度（单位 MHz）、时间（一个包含 user、nice、sys、idle 和 irq 所使用 CPU/内核毫秒数的对象）。
                        <a href="http://nodejs.cn/api/os.html#os_os_cpus">参考资料</a>
                    </span>
                </li>
                <li>
                    os.<a href="">networkInterfaces()</a>
                    <span>
                        获得网络接口列表。
                        <a href="http://nodejs.cn/api/os.html#os_os_networkinterfaces">参考资料</a>
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 数据</h4>
            <ul style="display:none;">
                <li>
                    os.<a href="">tmpdir()</a>
                    <span>
                        返回操作系统的默认临时文件夹。 <br>
                        C:\Users\iRuxu\AppData\Local\Temp
                    </span>
                </li>
                <li>
                    os.<a href="">homedir()</a>
                    <span>
                        返回当前用户的home目录
                    </span>
                </li>
                <li>
                    os.<a href="">userInfo</a>([opt])
                    <span>
                        os.userInfo()方法当前有效用户的信息 <hr>
                        1.在 POSIX平台上, 这通常是password 文件的子集. 返回的对象包括 username, uid, gid, shell, 和 homedir. <br>
                        2.在Windows系统上, uid 和 gid 域是 -1, and shell是 null.
                    </span>
                </li>
                <li>
                    os.<a href="">endianness()</a>
                    <span>
                        返回 CPU 的字节序，可能的是 "BE" 或 "LE"。
                    </span>
                </li>
                <li>
                    os.<a href="">constants</a>
                    <span>
                        返回一个包含错误码,处理信号等通用的操作系统特定常量的对象
                        <a href="http://nodejs.cn/api/os.html#os_os_constants_1">参考资料</a>
                    </span>
                </li>
                <li>
                    os.<a href="">EOL</a>
                    <span>
                        一个定义了操作系统的一行结束的标识的常量 <br>
                        <table>
                            <tr>
                                <th>系统</th>
                                <th>标志</th>
                            </tr>
                            <tr>
                                <td>POSIX</td>
                                <td>\n</td>
                            </tr>
                            <tr>
                                <td>Windows</td>
                                <td>\r\n</td>
                            </tr>
                        </table>
                    </span>
                </li>
            </ul>
        </div>
    </div>
</div>