<!-- 流 -->
<div class="u-col">
    <div class="u-block">
        <h3>stream<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] fs.Stream</h4>
            <ul>
                <li> 
                    fs.<a href="">createReadStream</a>(path,[opt])
                    <span>
                        返回一个新建的 ReadStream 对象 <hr>
                        path : string / buffer / url <br>
                        option : string(encoding) / object <br>
                        <ol>
                            <li>flags - 'r'</li>
                            <li>encoding - null</li>
                            <li>fd - null</li>
                            <li>mode - 0o666</li>
                            <li>autoClose - true</li>
                            <li>start - [</li>
                            <li>end - ]</li>
                        </ol>
                        options 可以包括 start 和 end 值，使其可以从文件读取一定范围的字节而不是整个文件。 <br>
                        如果指定了 fd，则 ReadStream 会忽略 path 参数并且会使用指定的文件描述符。 这意味着不会触发 'open' 事件。 <hr>
                        <a href="http://www.runoob.com/nodejs/nodejs-stream.html">参考资料：从流读取数据、写入流、管道流、链式流</a>
                    </span>
                </li>
                 <li>
                    fs.<a href="">createWriteStream</a>(path,[opt])
                    <span>
                        返回一个新建的 WriteStream 对象 <hr>
                        path : string / buffer / url <br>
                        option : string(encoding) / object <br>
                        <ol>
                            <li>flags - 'w'</li>
                            <li>encoding - 'utf8'</li>
                            <li>fd - null</li>
                            <li>mode - 0o666</li>
                            <li>autoClose - true</li>
                            <li>start - [</li>
                            <li>end - ]</li>
                        </ol>
                        如果是修改一个文件而不是覆盖它，则需要flags 模式为 r+ 而不是默认的 w 模式。
                    </span>
                </li>
                <li>
                    stream.<a href="">bytesRead</a>
                    <span>
                        已读取的字节数
                    </span>
                </li>
                <li>
                    stream.<a href="">bytesWritten</a>
                    <span>
                        已写入的字节数。 不包括仍在排队等待写入的数据。
                    </span>
                </li>
                <li>
                    stream.<a href="">path</a>
                    <span>
                        流正在读取的文件的路径，指定在 fs.createReadStream() 的第一个参数。 如果 path 传入的是一个字符串，则 readStream.path 是一个字符串。 如果 path 传入的是一个 Buffer，则 readStream.path 是一个 Buffer。
                    </span>
                </li>
                <li>
                    [evt]<a href="">open</a>
                    <span>
                        当 ReadStream/WriteStream 的文件被打开时触发
                    </span>
                </li>
                <li>
                    [evt]<a href="">close</a>
                    <span>
                        当 ReadStream/WriteStream 底层的文件描述符被关闭时触发。 <br>
                        'close' 事件触发后，该流将不会再触发任何事件。 <br>
                        不是所有可写流都会触发 'close' 事件。
                    </span>
                </li>
                <li>
                    [evt]<a href="">error</a>
                    <span>
                        'error' 事件在写入数据出错或者使用管道出错时触发。事件发生时，回调函数仅会接收到一个 Error 参数。 <br>
                        注意: 'error' 事件发生时，流并不会关闭。
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 可读流</h4>
            <ul>
                <li>
                    stream.<a href="">setEncoding</a>(encoding)
                    <span>
                        为从可读流读入的数据设置字符编码
                    </span>
                </li>
                <li>
                    stream.<a href="">pipe</a>(dest,[opt])
                    <span>
                        将可读流写入到可写流
                    </span>
                </li>
                <li>
                    stream.<a href="">unpipe</a>([dest])
                    <span>
                        将之前通过stream.pipe()方法绑定的流分离 <br>
                        如果 destination 没有传入, 则所有绑定的流都会被分离. <br>
                        如果传入 destination, 但它没有被pipe()绑定过，则该方法不作为.
                    </span>
                </li>
                <li>
                    stream.<a href="">read</a>([size])
                    <span>
                        从内部缓冲区中抽出并返回一些数据。 如果没有可读的数据，返回null。 <br>
                        默认数据将作为“Buffer”对象返回 ，除非已经使用readable.setEncoding()方法设置编码或流运行在对象模式。
                    </span>
                </li>
                
                <li>
                    stream.<a href="">pause()</a>
                    <span>
                        使 flowing 模式的流停止触发 'data' 事件， 进而切出 flowing 模式。任何可用的数据都将保存在内部缓存中。
                    </span>
                </li>
                <li>
                    stream.<a href="">isPaused()</a>
                    <span>
                        返回可读流的当前操作状态
                    </span>
                </li>
                <li>
                    stream.<a href="">resume()</a>
                    <span>
                        重新触发 'data' 事件, 将暂停模式切换到流动模式。
                    </span>
                </li>
                <li>
                    stream.<a href="">unshift</a>(chunk)
                    <span>
                        会把一块数据压回到Buffer内部
                    </span>
                </li>
                <li>
                    stream.<a href="">destroy</a>([error])
                    <span>
                        销毁流，并且触发error事件。然后，可读流将释放所有的内部资源。
                    </span>
                </li>
                <li>
                    [evt]<a href="">data</a>
                    <span>
                        'data' 事件会在流将数据传递给消费者时触发。 <br>
                        当流转换到 flowing 模式时会触发该事件。调用 readable.pipe()， readable.resume() 方法，或为 'data' 事件添加回调可以将流转换到 flowing 模式。 'data' 事件也会在调用 readable.read() 方法并有数据返回时触发。
                    </span>
                </li>
                <li>
                    [evt]<a href="">end</a>
                    <span>
                        'end' 事件将在流中再没有数据可供消费时触发。 <br>
                        注意： 'end' 事件只有在数据被完全消费后 才会触发 。 可以在数据被完全消费后，通过将流转换到 flowing 模式， 或反复调用 stream.read() 方法来实现这一点。
                    </span>
                </li>
                <li>
                    [evt]<a href="">readable</a>
                    <span>
                        'readable' 事件将在流中有数据可供读取时触发。 <br>
                        在某些情况下，为 'readable' 事件添加回调将会导致一些数据被读取到内部缓存中。
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 可写流</h4>
            <ul>
                <li>
                    stream.<a href="">setDefaultEncoding</a>(encoding)
                    <span>
                        设置编码 <br>
                        返回： this
                    </span>
                </li>
                <li>
                    stream.<a href="">write</a><em>(chunk,[encoding],[fn])</em>
                    <span>
                        向流中写入数据，并在数据处理完成后调用 callback 。 <br>
                        如果有错误发生， callback 不一定 以这个错误作为第一个参数并被调用。要确保可靠地检测到写入错误，应该监听 'error' 事件 <hr>
                        在确认了 chunk 后，如果内部缓冲区的大小小于创建流时设定的 highWaterMark 阈值，函数将返回 true 。 如果返回值为 false ，应该停止向流中写入数据，直到 'drain' 事件被触发。 <br>
                        返回：布尔值，如果流需要等待 'drain' 事件触发才能继续写入数据，这里将返回 false ； 否则返回 true。
                    </span>
                </li>
                <li>
                    stream.<a href="">end</a><em>([chunk],[encoding],[fn])</em>
                    <span>
                        调用 writable.end() 方法表明接下来没有数据要被写入 Writable <hr>
                        chunk - 需要写入的数据。对于非对象模式下的流， chunk 必须是字符串、或 Buffer、或 Uint8Array。对于对象模式下的流， chunk 可以是任意的 JavaScript 值，除了 null。 <br>
                        encoding - 如果 chunk 是字符串，这里指定字符编码。 <br>
                        callback - 流结束时的回调函数，它将作为 'finish' 事件的回调函数
                    </span>
                </li>
                <li>
                    stream.<a href="">cork()</a>
                    <span>
                        强制所有写入数据都存放到内存中的缓冲区里。 直到调用 stream.uncork() 或 stream.end() 方法时，缓冲区里的数据才会被输出。 <hr>
                        在向流中写入大量小块数据（small chunks of data）时，内部缓冲区（internal buffer）可能失效，从而导致性能下降。writable.cork() 方法主要就是用来避免这种情况。 对于这种情况， 实现了 writable._writev() 方法的流可以对写入的数据进行缓冲，从而提高写入效率。
                    </span>
                </li>
                <li>
                    stream.<a href="">uncork()</a>
                    <span>
                        输出在 stream.cork() 方法被调用之后缓冲在内存中的所有数据。 <br>
                        如果一个流多次调用了 writable.cork() 方法，那么也必须调用同样次数的 writable.uncork() 方法以输出缓冲区数据。
                    </span>
                </li>
                <li>
                    stream.<a href="">destroy</a>([error])
                    <span>
                        摧毁这个流，并发出传过来的错误。当这个函数被调用后，这个写入流就结束了。  <br>
                        返回： this
                    </span>
                </li>
                <li>
                    [evt]<a href="">finish</a>
                    <span>
                        在调用了 stream.end() 方法，且缓冲区数据都已经传给底层系统（underlying system）之后， 'finish' 事件将被触发。
                    </span>
                </li>
                <li>
                    [evt]<a href="">pipe</a>
                    <span>
                        在可读流（readable stream）上调用 stream.pipe() 方法，并在目标流向 (destinations) 中添加当前可写流 ( writable ) 时，将会在可写流上触发 'pipe' 事件。
                    </span>
                </li>
                <li>
                    [evt]<a href="">unpipe</a>
                    <span>
                        在 Readable 上调用 stream.unpipe() 方法，从目标流向中移除当前 Writable 时，将会触发 'unpipe' 事件。
                    </span>
                </li>
                <li>
                    [evt]<a href="">drain</a>
                    <span>
                        如果调用 stream.write(chunk) 方法返回 false，流将在适当的时机触发 'drain' 事件，这时才可以继续向流中写入数据。
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>readline<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>+</span>] 逐行读取</h4>
            <ul style="display:none">
                <li>
                    readline.<a href="">clearLine</a>(stream,dir)
                    <span>
                        
                    </span>
                </li>
                <li>
                    readline.<a href="">clearScreenDown</a>(stream)
                    <span>
                        
                    </span>
                </li>
                <li>
                    readline.<a href="">cursorTo</a>(stream,x,y)
                    <span>
                        
                    </span>
                </li>
                <li>
                    readline.<a href="">moveCursor</a>(stream,dx,dy)
                    <span>
                        
                    </span>
                </li>
                <li>
                    readline.<a href="">emitKeypressEvents</a>(stream,[interface])
                    <span>
                        
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] Interface</h4>
            <ul style="display:none">
                <li>
                    readline.<a href="">createInterface</a>(opt)
                    <span>
                        
                    </span>
                </li>
                <li>
                    [evt]<a href="">close</a>
                    <span>
                        
                    </span>
                </li>
                <li>
                    [evt]<a href="">line</a>
                    <span>
                        
                    </span>
                </li>
                <li>
                    [evt]<a href="">pause</a>
                    <span>
                        
                    </span>
                </li>
                <li>
                    [evt]<a href="">resume</a>
                    <span>
                        
                    </span>
                </li>
                <li>
                    [evt]<a href="">SIGCONT</a>
                    <span>
                        
                    </span>
                </li>
                <li>
                    [evt]<a href="">SIGINT</a>
                    <span>
                        
                    </span>
                </li>
                <li>
                    [evt]<a href="">SIGTSTP</a>
                    <span>
                        
                    </span>
                </li>
                <li>
                    rl.<a href="">close()</a>
                    <span>
                        
                    </span>
                </li>
                <li>
                    rl.<a href="">prompt</a>([preserveCursor])
                    <span>
                        
                    </span>
                </li>
                <li>
                    rl.<a href="">question</a>(query,fn)
                    <span>
                        
                    </span>
                </li>
                <li>
                    rl.<a href="">resume()</a>
                    <span>
                        
                    </span>
                </li>
                <li>
                    rl.<a href="">setPrompt</a>(prompt)
                    <span>
                        
                    </span>
                </li>
                <li>
                    rl.<a href="">write</a>(data,[key])
                    <span>
                        
                    </span>
                </li>
            </ul>
        </div>
    </div>
</div>