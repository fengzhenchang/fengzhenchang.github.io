<div class="u-col">
    <div class="u-block">
        <h3>语法<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>+</span>] 数据类型</h4>
            <ul style="display:none;">
                <li>
                    <a href="">boolean</a>
                    <span>
                        true/false
                    </span>
                </li>
                <li>
                    <a href="">tnteger</a>
                    <span>
                        整型
                    </span>
                </li>
                <li>
                    <a href="">float</a>
                    <span>
                        浮点数
                    </span>
                </li>
                <li>
                    <a href="">string</a>
                    <span>
                        '' / "" /
                        <<< </span>
                </li>
                <li>
                    <a href="">array</a>
                    <span>
                        array(1,2,3)
                        <br> array['key'=>'value']
                    </span>
                </li>
                <li>
                    <a href="">object</a>
                    <span>
                        类的实例化
                    </span>
                </li>
                <li>
                    <a href="">resource</a>
                    <span>
                        外部资源引用
                    </span>
                </li>
                <li>
                    <a href="">null</a>
                    <span>
                        变量为空值
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 类型操作</h4>
            <ul style="display:none;">
                <li>
                    <a href="">(type)</a> $var
                    <span>
                        强制转换类型
                    </span>
                </li>
                <li>
                    obj <a href="">instanceof</a> class
                    <span>
                        确定一个 PHP 变量是否属于某一类 class 的实例
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 变量</h4>
            <ul style="display:none;">
                <li>
                    <a href="">$var</a>
                    <span>
                        默认变量为传值赋值
                    </span>
                </li>
                <li>
                    <a href="">$a = &$b</a>
                    <span>
                        引用赋值方式
                    </span>
                </li>
                <li>
                    <a href="">global</a> $var
                    <span>
                        函数内变量默认为局部变量，引用全局变量必须先声明global
                    </span>
                </li>
                <li>
                    <a href="">static</a> $var
                    <span>
                        静态变量当函数执行完，保存其值
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 常量</h4>
            <ul style="display:none;">
                <li>
                    <a href="">define</a>(var,value)
                    <span>
                        定义常量，默认区分大小写 <br>
                        常量前面没有美元符号
                    </span>
                </li>
                <li>
                    <a href="">__LINE__</a>
                    <span>
                        文件中的当前行号
                    </span>
                </li>
                <li>
                    <a href="">__FILE__</a>
                    <span>
                        文件的完整路径和文件名 <br>
                        如果用在被包含文件中，则返回被包含的文件名
                    </span>
                </li>
                <li>
                    <a href="">__DIR__</a>
                    <span>
                        文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录
                    </span>
                </li>
                <li>
                    <a href="">__FUNCTION__</a>
                    <span>
                        函数名称
                    </span>
                </li>
                <li>
                    <a href="">__CLASS__</a>
                    <span>
                        类的名称
                    </span>
                </li>
                <li>
                    <a href="">__TRAIT__</a>
                    <span>
                        包括其被声明的作用区域（例如 Foo\Bar）
                    </span>
                </li>
                <li>
                    <a href="">__METHOD__</a>
                    <span>
                        类的方法名
                    </span>
                </li>
                <li>
                    <a href="">__NAMESPACE__</a>
                    <span>
                        当前命名空间的名称
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 运算符</h4>
            <ul style="display:none;">
                <li>
                    <a href="">$a / $b</a>
                    <span>
                        返回完整商
                    </span>
                </li>
                <li>
                    <a href="">intdiv($a,$b)</a>
                    <span>
                        返回整数部分 <br>
                        PHP7
                    </span>
                </li>
                <li>
                    <a href="">$a <=> $b</a>
                    <span>
                        当$a小于、等于、大于$b时 分别返回一个小于、等于、大于0的integer 值 <br>
                        PHP7
                    </span>
                </li>
                <li>
                    <a href="">$a?$b:$c</a>
                    <span>
                        可省略$b，直接返回$a或$c
                    </span>
                </li>
                <li>
                    <a href="">$a??$b</a>
                    <span>
                        返回$a或$b <br>
                        从左往右第一个存在且不为 NULL 的操作数。如果都没有定义且不为 NULL，则返回 NULL <br>
                        PHP7
                    </span>
                </li>
                <li>
                    <a href="">@exp</a>
                    <span>
                        错误控制运算符,该表达式可能产生的任何错误信息都被忽略掉
                    </span>
                </li>
                <li>
                    <a href="">`shell`</a>
                    <span>
                        执行运算符,可以返回给变量
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 流程控制</h4>
            <ul style="display:none;">
                <li>
                    <a href="">if/endif</a>
                    <span>
                        
                    </span>
                </li>
                <li>
                    <a href="">else/elseif</a>
                    <span>
                        
                    </span>
                </li>
                <li>
                    <a href="">while/do while</a>
                    <span>
                        
                    </span>
                </li>
                <li>
                    <a href="">for</a>
                    <span>
                        
                    </span>
                </li>
                <li>
                    <a href="">foreach</a>
                    <span>
                        遍历数组、对象
                    </span>
                </li>
                <li>
                    <a href="">switch</a>
                    <span>
                        注意和其它语言不同，continue 语句作用到 switch 上的作用类似于 break。如果在循环中有一个 switch 并希望 continue 到外层循环中的下一轮循环，用 continue 2。
                    </span>
                </li>
                <li>
                    <a href="">break</a> [1]
                    <span>
                        退出几重循环 <br>
                        break 结束当前 for，foreach，while，do-while 或者 switch 结构的执行。
                    </span>
                </li>
                <li>
                    <a href="">continue</a> [1]
                    <span>
                        跳过本次循环中剩余的代码并在条件求值为真时开始执行下一次循环
                    </span>
                </li>
                <li>
                    <a href="">goto</a>
                    <span>
                        跳转至对应label <br>
                        PHP 中的 goto 有一定限制，目标位置只能位于同一个文件和作用域，也就是说无法跳出一个函数或类方法，也无法跳入到另一个函数。也无法跳入到任何循环或者 switch 结构中。可以跳出循环或者 switch，通常的用法是用 goto 代替多层的 break。
                    </span>
                </li>
                <li>
                    <a href="">declare</a>
                    <span>
                        declare(encoding='utf-8');
                    </span>
                </li>
                <li>
                    <a href="">return</a>
                    <span>
                        如果在一个函数中调用 return 语句，将立即结束此函数的执行并将它的参数作为函数的值返回。 <br>
                        如果在全局范围中调用，则当前脚本文件中止运行。如果当前脚本文件是被 include 的或者 require 的，则控制交回调用文件。此外，如果当前脚本是被 include 的，则 return 的值会被当作 include 调用的返回值。如果在主脚本文件中调用 return，则脚本中止运行。
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 模块</h4>
            <ul style="display:none;">
                <li>
                    <a href="">require</a>(file)
                    <span>
                        require 在出错时会中止脚本，include只产生警告，脚本会继续运行
                    </span>
                </li>
                <li>
                    <a href="">require_once</a>(file)
                    <span>
                        PHP 会检查该文件是否已经被包含过，如果是则不会再次包含
                    </span>
                </li>
                <li>
                    <a href="">include</a>(file)
                    <span>
                        路径检查方式
                    </span>
                </li>
                <li>
                    <a href="">include_once</a>(file)
                    <span>
                        
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 函数</h4>
            <ul style="display:none;">
                <li>
                    <a href="">function</a>
                    <span>
                        函数声明提前 <br>
                        所有函数与类均为全局作用域 <br>
                        无法重载或取消
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>面向对象<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>+</span>] 属性</h4>
            <ul style="display:none;">
                <li>
                    <a href="">var</a> $prop
                    <span>
                        默认公有属性
                    </span>
                </li>
                <li>
                    <a href="">function</a> foo()
                    <span>
                        自定义公有方法
                    </span>
                </li>
                <li>
                    <a href="">const</a> prop
                    <span>
                        可以把在类中始终保持不变的值定义为常量。在定义和使用常量的时候不需要使用 $ 符号。
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 构造与析构</h4>
            <ul style="display:none;">
                <li>
                    <a href="">__construct</a>
                    <span>
                        初始化
                    </span>
                </li>
                <li>
                    <a href="">__destruct</a>
                    <span>
                        析构
                    </span>
                </li>
                
            </ul>
            <h4>[<span>+</span>] 权限与状态</h4>
            <ul style="display:none;">
                <li>
                    <a href="">public</a> key
                    <span>
                        公有的类成员可以在任何地方被访问
                    </span>
                </li>
                <li>
                    <a href="">protected</a> key
                    <span>
                        受保护的类成员则可以被其自身以及其子类和父类访问
                    </span>
                </li>
                <li>
                    <a href="">private</a> key
                    <span>
                        私有的类成员则只能被其定义所在的类访问
                    </span>
                </li>
                <li>
                    <a href="">static</a> key
                    <span>
                        声明类属性或方法为静态，就可以不实例化类而直接访问。静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）
                    </span>
                </li>
                <li>
                    <a href="">final</a> key
                    <span>
                        如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承。
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 关键字与符号</h4>
            <ul style="display:none;">
                <li>
                    <a href="">-></a>
                    <span>
                        对象运算符，访问非静态属性
                    </span>
                </li>
                <li>
                    <a href="">::</a>
                    <span>
                        :: 范围解析操作符，可以用于访问静态成员，类常量，还可以用于覆盖类中的属性和方法。
                    </span>
                </li>
                <li>
                    <a href="">$this</a>
                    <span>
                        $this指向实例对象
                    </span>
                </li>
                <li>
                    <a href="">self</a>
                    <span>
                        类本身
                    </span>
                </li>
                <li>
                    <a href="">parent</a>
                    <span>
                        父类
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 继承</h4>
            <ul style="display:none;">
                <li>
                    class child <a href="">extends</a> parent
                    <span>
                        
                    </span>
                </li>
                <li>
                    <a href="">trait</a> cls
                    <span>
                        其它子类中可通过use进行多继承 <br>
                        从基类继承的成员会被 trait 插入的成员所覆盖。优先顺序是来自当前类的成员覆盖了 trait 的方法，而 trait 则覆盖了被继承的方法。
                    </span>
                </li>
                <li>
                    <a href="">use</a> cls
                    <span>
                        继承trait类
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 接口</h4>
            <ul style="display:none;">
                <li>
                    <a href="">interface</a> tpl
                    <span>
                        定义一个接口
                    </span>
                </li>
                <li>
                    class cls <a href="">implements</a> tpl
                    <span>
                        实现接口
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 抽象</h4>
            <ul style="display:none;">
                <li>
                    <a href="">abstract</a> cls/fn
                    <span>
                        
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>预定义变量<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 预定义变量</h4>
            <ul>
                <li>
                    <a href="">$GLOBALS</a>[key]
                    <span>
                        引用全局作用域中可用的全部变量
                    </span>
                </li>
                <li>
                    <a href="">$_SERVER</a>
                    <span>
                        
                    </span>
                </li>
                <li>
                    <a href="">$_GET</a>
                    <span>
                        通过 URL 参数传递给当前脚本的变量的数组
                    </span>
                </li>
                <li>
                    <a href="">$_POST</a>
                    <span>
                        当 HTTP POST 请求的 Content-Type 是 application/x-www-form-urlencoded 或 multipart/form-data 时，会将变量以关联数组形式传入当前脚本。
                    </span>
                </li>
                <li>
                    <a href="">$_COOKIE</a>
                    <span>
                        通过 HTTP Cookies 方式传递给当前脚本的变量的数组。
                    </span>
                </li>
                <li>
                    <a href="">$_REQUEST</a>
                    <span>
                        默认情况下包含了 $_GET，$_POST 和 $_COOKIE 的数组
                    </span>
                </li>
                <li>
                    <a href="">$_FILES</a>
                    <span>
                        通过 HTTP POST 方式上传到当前脚本的项目的数组。
                    </span>
                </li>
                <li>
                    <a href="">$_SESSION</a>
                    <span>
                        
                    </span>
                </li>
                <li>
                    <a href="">$_ENV</a>
                    <span>
                        
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>环境<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 路由</h4>
            <ul>
                <li>
                    <a href="http://php.net/manual/zh/features.commandline.webserver.php">php -S localhost:8888</a>
                    <span>
                        PHP内置Web Server
                    </span>
                </li>
            </ul>
        </div>
    </div>
</div>